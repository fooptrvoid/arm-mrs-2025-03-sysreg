<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>ID_AA64ISAR1_EL1</reg_short_name>
        
        <reg_long_name>AArch64 Instruction Set Attribute Register 1</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_AA64 is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Provides information about the features and instructions implemented in AArch64 state.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers, see <xref linkend="#BABFAFHI">'Principles of the ID scheme for fields in ID registers'</xref>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Identification Registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ID_AA64ISAR1_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_60" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>LS64</field_name>
    <field_msb>63</field_msb>
    <field_lsb>60</field_lsb>
    <rel_range>63:60</rel_range>
    <field_description order="before">
      <para>Indicates support for <instruction>LD64B</instruction> and <instruction>ST64B*</instruction> instructions, and the <register_link state="AArch64" id="AArch64-accdata_el1.xml">ACCDATA_EL1</register_link> register.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_LS64">FEAT_LS64</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_LS64_V">FEAT_LS64_V</xref> implements the functionality identified by <binarynumber>0b0010</binarynumber>.</para>
<para><xref linkend="#FEAT_LS64_ACCDATA">FEAT_LS64_ACCDATA</xref> implements the functionality identified by <binarynumber>0b0011</binarynumber>.</para>
<para><xref linkend="#FEAT_LS64WB">FEAT_LS64WB</xref> implements the functionality identified by <binarynumber>0b0100</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>No <instruction>LD64B</instruction> or <instruction>ST64B</instruction> instructions are supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The <instruction>LD64B</instruction> and <instruction>ST64B</instruction> instructions are supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0001</binarynumber>, and adds the <instruction>ST64BV</instruction> instruction and traps.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0010</binarynumber>, and adds the <instruction>ST64BV0</instruction> instruction, <register_link state="AArch64" id="AArch64-accdata_el1.xml">ACCDATA_EL1</register_link> register, and traps.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description><para>As <binarynumber>0b0011</binarynumber>, and adds support for atomic accesses to Write-back Cacheable, Shareable memory using one of the following:</para>
<list type="unordered">
<listitem><content>
<para><instruction>LD64B</instruction> and <instruction>ST64B</instruction> instructions.</para>
</content>
</listitem><listitem><content>
<para>SIMD&amp;FP instructions that load or store a pair of 128-bit registers by generating 32-byte single-copy atomic accesses.</para>
</content>
</listitem></list></field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-59_56" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>XS</field_name>
    <field_msb>59</field_msb>
    <field_lsb>56</field_lsb>
    <rel_range>59:56</rel_range>
    <field_description order="before">
      <para>Indicates support for the XS attribute, the TLBI and DSB instructions with the nXS qualifier, and the <register_link state="AArch64" id="AArch64-hcrx_el2.xml">HCRX_EL2</register_link>.{FGTnXS, FnXS} fields in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_XS">FEAT_XS</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.7, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The XS attribute, the TLBI and DSB instructions with the nXS qualifier, and the <register_link state="AArch64" id="AArch64-hcrx_el2.xml">HCRX_EL2</register_link>.{FGTnXS, FnXS} fields are not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The XS attribute, the TLBI and DSB instructions with the nXS qualifier, and the <register_link state="AArch64" id="AArch64-hcrx_el2.xml">HCRX_EL2</register_link>.{FGTnXS, FnXS} fields are supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-55_52" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>I8MM</field_name>
    <field_msb>55</field_msb>
    <field_lsb>52</field_lsb>
    <rel_range>55:52</rel_range>
    <field_description order="before">
      <para>Indicates support for the following Advanced SIMD Int8 matrix multiplication instructions <instruction>SMMLA</instruction>, <instruction>SUDOT</instruction>, <instruction>UMMLA</instruction>, <instruction>USMMLA</instruction>, and <instruction>USDOT</instruction> in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_I8MM">FEAT_I8MM</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para>When Advanced SIMD and SVE are both implemented, this field must return the same value as <register_link state="AArch64" id="AArch64-id_aa64zfr0_el1.xml">ID_AA64ZFR0_EL1</register_link>.I8MM.</para>
<para>From Armv8.6, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Int8 matrix multiplication instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The specified instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-51_48" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>DGH</field_name>
    <field_msb>51</field_msb>
    <field_lsb>48</field_lsb>
    <rel_range>51:48</rel_range>
    <field_description order="before">
      <para>Indicates support for the Data Gathering Hint instruction.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_DGH">FEAT_DGH</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.0, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>If the <instruction>DGH</instruction> instruction has no effect in preventing the merging of memory accesses, the value of this field is <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Data Gathering Hint is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Data Gathering Hint is implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-47_44" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>BF16</field_name>
    <field_msb>47</field_msb>
    <field_lsb>44</field_lsb>
    <rel_range>47:44</rel_range>
    <field_description order="before">
      <para>Indicates support for Advanced SIMD and floating-point BFloat16 instructions in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_BF16">FEAT_BF16</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_EBF16">FEAT_EBF16</xref> implements the functionality identified by <binarynumber>0b0010</binarynumber>.</para>
<para>When <xref linkend="#FEAT_SVE">FEAT_SVE</xref> or <xref linkend="#FEAT_SME">FEAT_SME</xref> is implemented, this field must return the same value as <register_link state="AArch64" id="AArch64-id_aa64zfr0_el1.xml">ID_AA64ZFR0_EL1</register_link>.BF16.</para>
<para>From Armv8.6 and Armv9.1, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>BFloat16 instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><instruction>BFCVT</instruction>, <instruction>BFCVTN, BFCVTN2</instruction>, <instruction>BFDOT</instruction>, <instruction>BFMLALB</instruction>, <instruction>BFMLALT</instruction>, and <instruction>BFMMLA</instruction> instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0001</binarynumber>, but the <register_link state="AArch64" id="AArch64-fpcr.xml">FPCR</register_link>.EBF field is also supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-43_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SPECRES</field_name>
    <field_msb>43</field_msb>
    <field_lsb>40</field_lsb>
    <rel_range>43:40</rel_range>
    <field_description order="before">
      <para>Indicates support for prediction invalidation instructions in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_SPECRES">FEAT_SPECRES</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_SPECRES2">FEAT_SPECRES2</xref> implements the functionality identified by <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv8.5, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>From Armv8.9, the value <binarynumber>0b0001</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Prediction invalidation instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><register_link id="AArch64-cfp-rctx.xml" state="AArch64">CFP RCTX</register_link>, <register_link id="AArch64-dvp-rctx.xml" state="AArch64">DVP RCTX</register_link> and <register_link id="AArch64-cpp-rctx.xml" state="AArch64">CPP RCTX</register_link> instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0001</binarynumber>, and <register_link id="AArch64-cosp-rctx.xml" state="AArch64">COSP RCTX</register_link> instruction is implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-39_36" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SB</field_name>
    <field_msb>39</field_msb>
    <field_lsb>36</field_lsb>
    <rel_range>39:36</rel_range>
    <field_description order="before">
      <para>Indicates support for <instruction>SB</instruction> instruction in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_SB">FEAT_SB</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.5, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para><instruction>SB</instruction> instruction is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><instruction>SB</instruction> instruction is implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-35_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>FRINTTS</field_name>
    <field_msb>35</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>35:32</rel_range>
    <field_description order="before">
      <para>Indicates support for <instruction>FRINT32Z</instruction>, <instruction>FRINT32X</instruction>, <instruction>FRINT64Z</instruction>, and <instruction>FRINT64X</instruction> instructions.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_FRINTTS">FEAT_FRINTTS</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.5, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The specified instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The specified instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-31_28" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>GPI</field_name>
    <field_msb>31</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>31:28</rel_range>
    <field_description order="before">
      <para>Indicates support for an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented in the PE for generic code authentication in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>When this field is nonzero, <xref linkend="#FEAT_PACIMP">FEAT_PACIMP</xref> is implemented.</para>
<para>From Armv8.3, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>If the value of ID_AA64ISAR1_EL1.GPA is nonzero, or the value of <register_link state="AArch64" id="AArch64-id_aa64isar2_el1.xml">ID_AA64ISAR2_EL1</register_link>.GPA3 is nonzero, this field must have the value <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Generic Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Generic Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented. This includes the <instruction>PACGA</instruction> instruction.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-27_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>GPA</field_name>
    <field_msb>27</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>27:24</rel_range>
    <field_description order="before">
      <para>Indicates whether the QARMA5 algorithm is implemented in the PE for generic code authentication in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_PACQARMA5">FEAT_PACQARMA5</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para>When this field is nonzero, <xref linkend="#FEAT_PACQARMA5">FEAT_PACQARMA5</xref> is implemented.</para>
<para>From Armv8.3, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>If the value of ID_AA64ISAR1_EL1.GPI is nonzero, or the value of <register_link state="AArch64" id="AArch64-id_aa64isar2_el1.xml">ID_AA64ISAR2_EL1</register_link>.GPA3 is nonzero, this field must have the value <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Generic Authentication using the QARMA5 algorithm is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Generic Authentication using the QARMA5 algorithm is implemented. This includes the <instruction>PACGA</instruction> instruction.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-23_20" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>LRCPC</field_name>
    <field_msb>23</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>23:20</rel_range>
    <field_description order="before">
      <para>Indicates support for weaker release consistency, RCpc, based model.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_LRCPC">FEAT_LRCPC</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_LRCPC2">FEAT_LRCPC2</xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para><xref linkend="#FEAT_LRCPC3">FEAT_LRCPC3</xref> implements the functionality identified by the value <binarynumber>0b0011</binarynumber>.</para>
<para>From Armv8.3, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>From Armv8.4, the value <binarynumber>0b0001</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>RCpc instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The no offset <instruction>LDAPR</instruction>, <instruction>LDAPRB</instruction>, and <instruction>LDAPRH</instruction> instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0001</binarynumber>, and the <instruction>LDAPR</instruction> (unscaled immediate) and <instruction>STLR</instruction> (unscaled immediate) instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description><para>As <binarynumber>0b0010</binarynumber>, and the post-index <instruction>LDAPR</instruction>, <instruction>LDIAPP</instruction>, <instruction>STILP</instruction>, and pre-index <instruction>STLR</instruction> instructions are implemented.</para>
<para>If Advanced SIMD and floating-point is implemented, then the <instruction>LDAPUR</instruction> (SIMD&amp;FP), <instruction>LDAP1</instruction> (SIMD&amp;FP), <instruction>STLUR</instruction> (SIMD&amp;FP), and <instruction>STL1</instruction> (SIMD&amp;FP) instructions are implemented in Advanced SIMD and floating-point.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-19_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>FCMA</field_name>
    <field_msb>19</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>19:16</rel_range>
    <field_description order="before">
      <para>Indicates support for complex number addition and multiplication, where numbers are stored in vectors.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_FCMA">FEAT_FCMA</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.3, if Advanced SIMD or floating-point is implemented, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>From Armv8.3, if Advanced SIMD or floating-point is not implemented, the only permitted value is <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The <instruction>FCMLA</instruction> and <instruction>FCADD</instruction> instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The <instruction>FCMLA</instruction> and <instruction>FCADD</instruction> instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-15_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>JSCVT</field_name>
    <field_msb>15</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>15:12</rel_range>
    <field_description order="before">
      <para>Indicates support for JavaScript conversion from double-precision floating-point values to integers in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_JSCVT">FEAT_JSCVT</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.3, if Advanced SIMD or floating-point is implemented, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>From Armv8.3, if Advanced SIMD or floating-point is not implemented, the only permitted value is <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The <instruction>FJCVTZS</instruction> instruction is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The <instruction>FJCVTZS</instruction> instruction is implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-11_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>API</field_name>
    <field_msb>11</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>11:8</rel_range>
    <field_description order="before">
      <para>Indicates whether an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented in the PE for address authentication, in AArch64 state. This applies to all Pointer Authentication instructions other than the <instruction>PACGA</instruction> instruction.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_PAuth">FEAT_PAuth</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_EPAC">FEAT_EPAC</xref> implements the functionality identified by <binarynumber>0b0010</binarynumber>.</para>
<para><xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref> implements the functionality identified by <binarynumber>0b0011</binarynumber>.</para>
<para><xref linkend="#FEAT_FPAC">FEAT_FPAC</xref> implements the functionality identified by <binarynumber>0b0100</binarynumber>.</para>
<para><xref linkend="#FEAT_FPACCOMBINE">FEAT_FPACCOMBINE</xref> implements the functionality identified by <binarynumber>0b0101</binarynumber>.</para>
<para><xref linkend="#FEAT_PAuth_LR">FEAT_PAuth_LR</xref> implements the functionality identified by <binarynumber>0b0110</binarynumber>.</para>
<para>When this field is nonzero, <xref linkend="#FEAT_PACIMP">FEAT_PACIMP</xref> is implemented.</para>
<para>In Armv8.3, the permitted values are <binarynumber>0b0000</binarynumber>, <binarynumber>0b0001</binarynumber>, <binarynumber>0b0010</binarynumber>, <binarynumber>0b0011</binarynumber>, <binarynumber>0b0100</binarynumber>, and <binarynumber>0b0101</binarynumber>.</para>
<para>From Armv8.6, the permitted values are <binarynumber>0b0000</binarynumber>, <binarynumber>0b0011</binarynumber>, <binarynumber>0b0100</binarynumber>, and <binarynumber>0b0101</binarynumber>.</para>
<para>From Armv9.5, the permitted values are <binarynumber>0b0000</binarynumber>, <binarynumber>0b0011</binarynumber>, <binarynumber>0b0100</binarynumber>, <binarynumber>0b0101</binarynumber>, and <binarynumber>0b0110</binarynumber>.</para>
<para>If the value of ID_AA64ISAR1_EL1.APA is nonzero, or the value of <register_link state="AArch64" id="AArch64-id_aa64isar2_el1.xml">ID_AA64ISAR2_EL1</register_link>.APA3 is nonzero, this field must have the value <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Address Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Address Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented, FEAT_EPAC and FEAT_PAuth2 are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>Address Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented, <xref linkend="#FEAT_EPAC">FEAT_EPAC</xref> is implemented, and FEAT_PAuth2 is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>Address Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented, FEAT_EPAC is not implemented, and <xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref> is implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
          <para>Address Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented, FEAT_EPAC is not implemented, <xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref> and <xref linkend="#FEAT_FPAC">FEAT_FPAC</xref> are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
          <para>Address Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented, FEAT_EPAC is not implemented, <xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref>, <xref linkend="#FEAT_FPAC">FEAT_FPAC</xref>, and <xref linkend="#FEAT_FPACCOMBINE">FEAT_FPACCOMBINE</xref> are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
          <para>Address Authentication using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> algorithm is implemented, including instructions that allow signing of LR using SP and PC as diversifiers, FEAT_EPAC is not implemented, <xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref>, <xref linkend="#FEAT_FPAC">FEAT_FPAC</xref>, <xref linkend="#FEAT_FPACCOMBINE">FEAT_FPACCOMBINE</xref>, and <xref linkend="#FEAT_PAuth_LR">FEAT_PAuth_LR</xref> are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-7_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>APA</field_name>
    <field_msb>7</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>7:4</rel_range>
    <field_description order="before">
      <para>Indicates whether the QARMA5 algorithm is implemented in the PE for address authentication, in AArch64 state. This applies to all Pointer Authentication instructions other than the <instruction>PACGA</instruction> instruction.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_PAuth">FEAT_PAuth</xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_EPAC">FEAT_EPAC</xref> implements the functionality identified by <binarynumber>0b0010</binarynumber>.</para>
<para><xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref> implements the functionality identified by <binarynumber>0b0011</binarynumber>.</para>
<para><xref linkend="#FEAT_FPAC">FEAT_FPAC</xref> implements the functionality identified by <binarynumber>0b0100</binarynumber>.</para>
<para><xref linkend="#FEAT_FPACCOMBINE">FEAT_FPACCOMBINE</xref> implements the functionality identified by <binarynumber>0b0101</binarynumber>.</para>
<para><xref linkend="#FEAT_PAuth_LR">FEAT_PAuth_LR</xref> implements the functionality identified by <binarynumber>0b0110</binarynumber>.</para>
<para>When this field is nonzero, <xref linkend="#FEAT_PACQARMA5">FEAT_PACQARMA5</xref> is implemented.</para>
<para>In Armv8.3, the permitted values are <binarynumber>0b0000</binarynumber>, <binarynumber>0b0001</binarynumber>, <binarynumber>0b0010</binarynumber>, <binarynumber>0b0011</binarynumber>, <binarynumber>0b0100</binarynumber>, and <binarynumber>0b0101</binarynumber>.</para>
<para>From Armv8.6, the permitted values are <binarynumber>0b0000</binarynumber>, <binarynumber>0b0011</binarynumber>, <binarynumber>0b0100</binarynumber>, and <binarynumber>0b0101</binarynumber>.</para>
<para>From Armv9.5, the permitted values are <binarynumber>0b0000</binarynumber>, <binarynumber>0b0011</binarynumber>, <binarynumber>0b0100</binarynumber>, <binarynumber>0b0101</binarynumber>, and <binarynumber>0b0110</binarynumber>.</para>
<para>If the value of ID_AA64ISAR1_EL1.API is nonzero, or the value of <register_link state="AArch64" id="AArch64-id_aa64isar2_el1.xml">ID_AA64ISAR2_EL1</register_link>.APA3 is nonzero, this field must have the value <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Address Authentication using the QARMA5 algorithm is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Address Authentication using the QARMA5 algorithm is implemented, FEAT_EPAC and FEAT_PAuth2 are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>Address Authentication using the QARMA5 algorithm is implemented, <xref linkend="#FEAT_EPAC">FEAT_EPAC</xref> is implemented, and FEAT_PAuth2 is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>Address Authentication using the QARMA5 algorithm is implemented, FEAT_EPAC is not implemented, and <xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref> is implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
          <para>Address Authentication using the QARMA5 algorithm is implemented, FEAT_EPAC is not implemented, <xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref> and <xref linkend="#FEAT_FPAC">FEAT_FPAC</xref> are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
          <para>Address Authentication using the QARMA5 algorithm is implemented, FEAT_EPAC is not implemented, <xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref>, <xref linkend="#FEAT_FPAC">FEAT_FPAC</xref>, and <xref linkend="#FEAT_FPACCOMBINE">FEAT_FPACCOMBINE</xref> are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
          <para>Address Authentication using the QARMA5 algorithm is implemented, including instructions that allow signing of LR using SP and PC as diversifiers, FEAT_EPAC is not implemented, <xref linkend="#FEAT_PAuth2">FEAT_PAuth2</xref>, <xref linkend="#FEAT_FPAC">FEAT_FPAC</xref>, <xref linkend="#FEAT_FPACCOMBINE">FEAT_FPACCOMBINE</xref>, and <xref linkend="#FEAT_PAuth_LR">FEAT_PAuth_LR</xref> are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-3_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>DPB</field_name>
    <field_msb>3</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Data Persistence writeback. Indicates support for the <register_link id="AArch64-dc-cvap.xml" state="AArch64">DC CVAP</register_link> and <register_link id="AArch64-dc-cvadp.xml" state="AArch64">DC CVADP</register_link> instructions in AArch64 state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_DPB">FEAT_DPB</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_DPB2">FEAT_DPB2</xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv8.2, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>From Armv8.5, the value <binarynumber>0b0001</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para><register_link id="AArch64-dc-cvap.xml" state="AArch64">DC CVAP</register_link> not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><register_link id="AArch64-dc-cvap.xml" state="AArch64">DC CVAP</register_link> supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para><register_link id="AArch64-dc-cvap.xml" state="AArch64">DC CVAP</register_link> and <register_link id="AArch64-dc-cvadp.xml" state="AArch64">DC CVADP</register_link> supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_60" msb="63" lsb="60"/>
  <fieldat id="fieldset_0-59_56" msb="59" lsb="56"/>
  <fieldat id="fieldset_0-55_52" msb="55" lsb="52"/>
  <fieldat id="fieldset_0-51_48" msb="51" lsb="48"/>
  <fieldat id="fieldset_0-47_44" msb="47" lsb="44"/>
  <fieldat id="fieldset_0-43_40" msb="43" lsb="40"/>
  <fieldat id="fieldset_0-39_36" msb="39" lsb="36"/>
  <fieldat id="fieldset_0-35_32" msb="35" lsb="32"/>
  <fieldat id="fieldset_0-31_28" msb="31" lsb="28"/>
  <fieldat id="fieldset_0-27_24" msb="27" lsb="24"/>
  <fieldat id="fieldset_0-23_20" msb="23" lsb="20"/>
  <fieldat id="fieldset_0-19_16" msb="19" lsb="16"/>
  <fieldat id="fieldset_0-15_12" msb="15" lsb="12"/>
  <fieldat id="fieldset_0-11_8" msb="11" lsb="8"/>
  <fieldat id="fieldset_0-7_4" msb="7" lsb="4"/>
  <fieldat id="fieldset_0-3_0" msb="3" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






    
        
        <access_mechanism accessor="MRS ID_AA64ISAR1_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, ID_AA64ISAR1_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0110"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_AA64) then
    UnimplementedIDRegister();
elsif PSTATE.EL == EL0 then
    if IsFeatureImplemented(FEAT_IDST) then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ID_AA64ISAR1_EL1;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ID_AA64ISAR1_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = ID_AA64ISAR1_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:52; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>