<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="False" is_internal="True" is_stub_entry="False">
      <reg_short_name>GCSPUSHM</reg_short_name>
        
        <reg_long_name>Guarded Control Stack Push</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_GCS is implemented and FEAT_AA64 is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Decrements the current Guarded Control Stack Pointer register by the size of a Guarded Control Stack procedure return record and stores an entry to the Guarded Control Stack.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GCSE Instructions</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GCSPUSHM is a 64-bit System instruction.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Input</field_name>
    <field_shortdesc>Input value for Guarded Control Stack procedure return record</field_shortdesc>
    <field_msb>63</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>63:0</rel_range>
    <field_description order="before">
      <para>Input value for Guarded Control Stack procedure return record.</para>
    </field_description>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_0" msb="63" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






    
        
        <access_mechanism accessor="GCSPUSHM" type="SystemAccessor">
            <encoding>
            <access_instruction>GCSPUSHM &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b01"/>
                
                <enc n="op1" v="0b011"/>
                
                <enc n="CRn" v="0b0111"/>
                
                <enc n="CRm" v="0b0111"/>
                
                <enc n="op2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="GCSPUSHM" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_GCS) &amp;&amp; IsFeatureImplemented(FEAT_AA64)) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    if (!EL2Enabled() || HCR_EL2.TGE != '1') &amp;&amp; GCSCRE0_EL1.PUSHMEn == '0' then
        AArch64.SystemAccessTrap(EL1, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' &amp;&amp; GCSCRE0_EL1.PUSHMEn == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif GCSEnabled(EL0) then
        GCSPUSHM(X[t, 64]);
elsif PSTATE.EL == EL1 then
    if GCSCR_EL1.PUSHMEn == '0' then
        AArch64.SystemAccessTrap(EL1, 0x18);
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGITR_EL2.nGCSPUSHM_EL1 == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif GCSEnabled(EL1) then
        GCSPUSHM(X[t, 64]);
elsif PSTATE.EL == EL2 then
    if GCSCR_EL2.PUSHMEn == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif GCSEnabled(EL2) then
        GCSPUSHM(X[t, 64]);
elsif PSTATE.EL == EL3 then
    if GCSCR_EL3.PUSHMEn == '0' then
        AArch64.SystemAccessTrap(EL3, 0x18);
    elsif GCSEnabled(EL3) then
        GCSPUSHM(X[t, 64]);
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:52; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>