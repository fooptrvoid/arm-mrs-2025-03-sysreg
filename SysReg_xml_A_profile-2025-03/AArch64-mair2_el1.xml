<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>MAIR2_EL1</reg_short_name>
        
        <reg_long_name>Extended Memory Attribute Indirection Register (EL1)</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_AIE is implemented and FEAT_AA64 is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Provides the memory attribute encodings corresponding to the possible AttrIndx values in a VMSAv8-64 or VMSAv9-128 translation table entry for stage 1 translations at EL1.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>Memory</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>MAIR2_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Attr&lt;n&gt;</field_name>
    <field_msb>63</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>63:0</rel_range>
    <field_description order="before"><para>Memory Attribute encoding.</para>
<para>When stage 1 Attributes Index Extension is enabled and AttrIndx[3] in a VMSAv8-64 or VMSAv9-128 translation table entry is 1, AttrIndx[2:0] gives the value of &lt;n&gt; in Attr&lt;n&gt;.</para>
<para>When stage 1 Attributes Index Extension is enabled and AttrIndx[3] in a VMSAv8-64 or VMSAv9-128 translation table entry is 0, see MAIR_EL1.Attr</para>
<para>Attr is encoded as follows:</para>
<table><tgroup cols="3"><thead><row><entry>Attr</entry><entry/><entry>Meaning</entry></row></thead><tbody><row><entry>0b0000dd00</entry><entry/><entry>Device memory.
See encoding of 'dd' for the type of Device memory.</entry></row><row><entry>0b0000dd01</entry><entry/><entry>If FEAT_XS is implemented:
Device memory with the XS attribute set to 0.
See encoding of 'dd' for the type of Device memory.
Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry>0b0000dd1x</entry><entry/><entry><arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry>0booooiiii</entry><entry>where oooo != 0000
and iiii != 0000</entry><entry>Normal memory. See encoding of 'oooo' and 'iiii' for the
type of Normal memory.</entry></row><row><entry><binarynumber>0b01000000</binarynumber></entry><entry/><entry>If FEAT_XS is implemented:
Normal Inner Non-cacheable, Outer Non-cacheable memory
with the XS attribute set to 0.
Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry><binarynumber>0b10100000</binarynumber></entry><entry/><entry>If FEAT_XS is implemented:
Normal Inner Write-through Cacheable, Outer Write-through Cacheable,
Read-Allocate, No-Write Allocate, Non-transient memory
with the XS attribute set to 0.
Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry><binarynumber>0b11110000</binarynumber></entry><entry/><entry>If FEAT_MTE2 is implemented:
Tagged Normal Inner Write-Back, Outer Write-Back,
Read-Allocate, Write-Allocate Non-transient memory.
Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry><binarynumber>0bxxxx0000</binarynumber></entry><entry>where xxxx != 0000
and xxxx != 0100
and xxxx != 1010
and xxxx != 1111</entry><entry><arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row></tbody></tgroup></table>
<para><value>dd</value> is encoded as follows:</para>
<table><tgroup cols="2"><thead><row><entry>'dd'</entry><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b00</binarynumber></entry><entry>Device-nGnRnE memory.</entry></row><row><entry><binarynumber>0b01</binarynumber></entry><entry>Device-nGnRE memory.</entry></row><row><entry><binarynumber>0b10</binarynumber></entry><entry>Device-nGRE memory.</entry></row><row><entry><binarynumber>0b11</binarynumber></entry><entry>Device-GRE memory.</entry></row></tbody></tgroup></table>
<para><value>oooo</value> is encoded as follows:</para>
<table><tgroup cols="3"><thead><row><entry>'oooo'</entry><entry/><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0000</binarynumber></entry><entry/><entry>See encoding of Attr.</entry></row><row><entry>0b00RW</entry><entry>where RW != 00</entry><entry>Normal memory, Outer Write-Through Transient.</entry></row><row><entry><binarynumber>0b0100</binarynumber></entry><entry/><entry>Normal memory, Outer Non-cacheable.</entry></row><row><entry>0b01RW</entry><entry>where RW != 00</entry><entry>Normal memory, Outer Write-Back Transient.</entry></row><row><entry>0b10RW</entry><entry/><entry>Normal memory, Outer Write-Through Non-transient.</entry></row><row><entry>0b11RW</entry><entry/><entry>Normal memory, Outer Write-Back Non-transient.</entry></row></tbody></tgroup></table>
<para><value>R</value> encodes the Outer Read-Allocate policy and <value>W</value> encodes the Outer Write-Allocate policy.</para>
<para><value>iiii</value> is encoded as follows:</para>
<table><tgroup cols="3"><thead><row><entry>'iiii'</entry><entry/><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0000</binarynumber></entry><entry/><entry>See encoding of Attr.</entry></row><row><entry>0b00RW</entry><entry>where RW != 00</entry><entry>Normal memory, Inner Write-Through Transient.</entry></row><row><entry><binarynumber>0b0100</binarynumber></entry><entry/><entry>Normal memory, Inner Non-cacheable.</entry></row><row><entry>0b01RW</entry><entry>where RW != 00</entry><entry>Normal memory, Inner Write-Back Transient.</entry></row><row><entry>0b10RW</entry><entry/><entry>Normal memory, Inner Write-Through Non-transient.</entry></row><row><entry>0b11RW</entry><entry/><entry>Normal memory, Inner Write-Back Non-transient.</entry></row></tbody></tgroup></table>
<para><value>R</value> encodes the Inner Read-Allocate policy and <value>W</value> encodes the Inner Write-Allocate policy.</para>
<para>In <value>oooo</value> and <value>iiii</value>, <value>R</value> and <value>W</value> are encoded as follows:</para>
<table><tgroup cols="2"><thead><row><entry>'R' or 'W'</entry><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0</binarynumber></entry><entry>No Allocate.</entry></row><row><entry><binarynumber>0b1</binarynumber></entry><entry>Allocate.</entry></row></tbody></tgroup></table>
<para>When <xref linkend="#FEAT_XS">FEAT_XS</xref> is implemented, stage 1 Inner Write-Back Cacheable, Outer Write-Back Cacheable memory types have the XS attribute set to 0.</para></field_description>
    <field_array_indexes index_variable="n" element_size="8" range_specifier="8n+7:8n">
      <field_array_index>
        <field_array_start>7</field_array_start>
        <field_array_end>0</field_array_end>
      </field_array_index>
    </field_array_indexes>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_0" label="Attr7" msb="63" lsb="56"/>
  <fieldat id="fieldset_0-63_0" label="Attr6" msb="55" lsb="48"/>
  <fieldat id="fieldset_0-63_0" label="Attr5" msb="47" lsb="40"/>
  <fieldat id="fieldset_0-63_0" label="Attr4" msb="39" lsb="32"/>
  <fieldat id="fieldset_0-63_0" label="Attr3" msb="31" lsb="24"/>
  <fieldat id="fieldset_0-63_0" label="Attr2" msb="23" lsb="16"/>
  <fieldat id="fieldset_0-63_0" label="Attr1" msb="15" lsb="8"/>
  <fieldat id="fieldset_0-63_0" label="Attr0" msb="7" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>When the Effective value of <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.E2H is 1, without explicit synchronization, accesses from EL3 using the accessor name <value>MAIR2_EL1</value> or <value>MAIR2_EL12</value> are not guaranteed to be ordered with respect to accesses using the other accessor name.</para>
      </access_permission_text>





    
        
        <access_mechanism accessor="MRS MAIR2_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, MAIR2_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1010"/>
                
                <enc n="CRm" v="0b0010"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_AIE) &amp;&amp; IsFeatureImplemented(FEAT_AA64)) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; SCR_EL3.AIEn == '0' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TRVM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGRTR_EL2.nMAIR2_EL1 == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.AIEn == '0' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif EffectiveHCR_EL2_NVx() IN {'111'} then
        X[t, 64] = NVMem[0x280];
    else
        X[t, 64] = MAIR2_EL1;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; SCR_EL3.AIEn == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.AIEn == '0' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif ELIsInHost(EL2) then
        X[t, 64] = MAIR2_EL2;
    else
        X[t, 64] = MAIR2_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = MAIR2_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MSRregister MAIR2_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR MAIR2_EL1, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1010"/>
                
                <enc n="CRm" v="0b0010"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_AIE) &amp;&amp; IsFeatureImplemented(FEAT_AA64)) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; SCR_EL3.AIEn == '0' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TVM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGWTR_EL2.nMAIR2_EL1 == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.AIEn == '0' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif EffectiveHCR_EL2_NVx() IN {'111'} then
        NVMem[0x280] = X[t, 64];
    else
        MAIR2_EL1 = X[t, 64];
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; SCR_EL3.AIEn == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.AIEn == '0' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif ELIsInHost(EL2) then
        MAIR2_EL2 = X[t, 64];
    else
        MAIR2_EL1 = X[t, 64];
elsif PSTATE.EL == EL3 then
    MAIR2_EL1 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MRS MAIR2_EL12" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, MAIR2_EL12</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b101"/>
                
                <enc n="CRn" v="0b1010"/>
                
                <enc n="CRm" v="0b0010"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_AIE) &amp;&amp; IsFeatureImplemented(FEAT_AA64)) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EffectiveHCR_EL2_NVx() == '101' then
        X[t, 64] = NVMem[0x280];
    elsif EffectiveHCR_EL2_NVx() IN {'xx1'} then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ELIsInHost(EL2) then
        if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; SCR_EL3.AIEn == '0' then
            UNDEFINED;
        elsif HaveEL(EL3) &amp;&amp; SCR_EL3.AIEn == '0' then
            if EL3SDDUndef() then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        else
            X[t, 64] = MAIR2_EL1;
    else
        UNDEFINED;
elsif PSTATE.EL == EL3 then
    if ELIsInHost(EL2) then
        X[t, 64] = MAIR2_EL1;
    else
        UNDEFINED;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MSRregister MAIR2_EL12" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR MAIR2_EL12, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b101"/>
                
                <enc n="CRn" v="0b1010"/>
                
                <enc n="CRm" v="0b0010"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_AIE) &amp;&amp; IsFeatureImplemented(FEAT_AA64)) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EffectiveHCR_EL2_NVx() == '101' then
        NVMem[0x280] = X[t, 64];
    elsif EffectiveHCR_EL2_NVx() IN {'xx1'} then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ELIsInHost(EL2) then
        if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; SCR_EL3.AIEn == '0' then
            UNDEFINED;
        elsif HaveEL(EL3) &amp;&amp; SCR_EL3.AIEn == '0' then
            if EL3SDDUndef() then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        else
            MAIR2_EL1 = X[t, 64];
    else
        UNDEFINED;
elsif PSTATE.EL == EL3 then
    if ELIsInHost(EL2) then
        MAIR2_EL1 = X[t, 64];
    else
        UNDEFINED;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:52; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>