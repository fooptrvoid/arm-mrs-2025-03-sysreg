<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>ID_AA64DFR0_EL1</reg_short_name>
        
        <reg_long_name>AArch64 Debug Feature Register 0</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_AA64 is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Provides top-level information about the debug system in AArch64 state.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers, see <xref linkend="#BABFAFHI">'Principles of the ID scheme for fields in ID registers'</xref>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Identification Registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>The external register <register_link state="ext" id="ext-eddfr.xml">EDDFR</register_link> gives information from this register.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ID_AA64DFR0_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_60" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>HPMN0</field_name>
    <field_msb>63</field_msb>
    <field_lsb>60</field_lsb>
    <rel_range>63:60</rel_range>
    <field_description order="before">
      <para>Zero PMU event counters for a Guest operating system.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_HPMN0">FEAT_HPMN0</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.8, in an implementation that includes <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref>, <xref linkend="#FEAT_FGT">FEAT_FGT</xref>, and EL2, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Setting <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN to zero has <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> behavior.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Setting <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN to zero has defined behavior.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-59_56" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>ExtTrcBuff</field_name>
    <field_msb>59</field_msb>
    <field_lsb>56</field_lsb>
    <rel_range>59:56</rel_range>
    <field_description order="before">
      <para>Trace Buffer External Mode Extension.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_TRBE_EXT">FEAT_TRBE_EXT</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Trace Buffer External Mode not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Trace Buffer External Mode implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-55_52" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>BRBE</field_name>
    <field_msb>55</field_msb>
    <field_lsb>52</field_lsb>
    <rel_range>55:52</rel_range>
    <field_description order="before">
      <para>Branch Record Buffer Extension.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_BRBE">FEAT_BRBE</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_BRBEv1p1">FEAT_BRBEv1p1</xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv9.3, if <xref linkend="#FEAT_BRBE">FEAT_BRBE</xref> is implemented, the value <binarynumber>0b0001</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Branch Record Buffer Extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Branch Record Buffer Extension implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0001</binarynumber>, and adds support for branch recording at EL3.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-51_48" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>MTPMU</field_name>
    <field_msb>51</field_msb>
    <field_lsb>48</field_lsb>
    <rel_range>51:48</rel_range>
    <field_description order="before">
      <para>Multi-threaded PMU extension.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_MTPMU">FEAT_MTPMU</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.6, in an implementation that includes <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref>, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>In an implementation that does not include <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref>, the value <binarynumber>0b0001</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para><xref linkend="#FEAT_MTPMU">FEAT_MTPMU</xref> not implemented. If <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link>.MT and <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link>.MT are read/write or <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><xref linkend="#FEAT_MTPMU">FEAT_MTPMU</xref> and <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> implemented. <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link>.MT and <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link>.MT are read/write. When <xref linkend="#FEAT_MTPMU">FEAT_MTPMU</xref> is disabled, the Effective values of <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link>.MT and <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link>.MT are 0.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
          <para><xref linkend="#FEAT_MTPMU">FEAT_MTPMU</xref> not implemented. If <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link>.MT and <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link>.MT are <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-47_44" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>TraceBuffer</field_name>
    <field_msb>47</field_msb>
    <field_lsb>44</field_lsb>
    <rel_range>47:44</rel_range>
    <field_description order="before">
      <para>Trace Buffer Extension.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>FEAT_TRBE implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>FEAT_TRBEv1p1 implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>In any Armv9 implementation, if <xref linkend="#FEAT_ETE">FEAT_ETE</xref> is implemented, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>From Armv9.6, if <xref linkend="#FEAT_TRBE">FEAT_TRBE</xref> is implemented, the value <binarynumber>0b0001</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Trace Buffer Extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Trace Buffer Extension implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description><para>As <binarynumber>0b0001</binarynumber>, and adds:</para>
<list type="unordered">
<listitem><content>If EL2 and <xref linkend="#FEAT_FGT">FEAT_FGT</xref> are implemented, a fine-grained trap on the <instruction>TSB CSYNC</instruction> instruction.</content>
</listitem><listitem><content>If EL2 is implemented, an EL2 control to override <register_link state="AArch64" id="AArch64-trblimitr_el1.xml">TRBLIMITR_EL1</register_link>.nVM.</content>
</listitem><listitem><content>The TRBE Profiling exception extension, <xref linkend="#FEAT_TRBE_EXC">FEAT_TRBE_EXC</xref>.</content>
</listitem></list></field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-43_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>TraceFilt</field_name>
    <field_msb>43</field_msb>
    <field_lsb>40</field_lsb>
    <rel_range>43:40</rel_range>
    <field_description order="before">
      <para>Armv8.4 Self-hosted Trace Extension version.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_TRF">FEAT_TRF</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.4, if <xref linkend="#FEAT_ETMv4">FEAT_ETMv4</xref> is implemented, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>If <xref linkend="#FEAT_ETE">FEAT_ETE</xref> is implemented, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Armv8.4 Self-hosted Trace Extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Armv8.4 Self-hosted Trace Extension implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-39_36" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>DoubleLock</field_name>
    <field_msb>39</field_msb>
    <field_lsb>36</field_lsb>
    <rel_range>39:36</rel_range>
    <field_description order="before">
      <para>OS Double Lock implemented.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_DoubleLock">FEAT_DoubleLock</xref> implements the functionality identified by the value <binarynumber>0b0000</binarynumber>.</para>
<para>In Armv8.0, the only permitted value is <binarynumber>0b0000</binarynumber>.</para>
<para>If <xref linkend="#FEAT_Debugv8p2">FEAT_Debugv8p2</xref> is implemented and <xref linkend="#FEAT_DoPD">FEAT_DoPD</xref> is not implemented, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b1111</binarynumber>.</para>
<para>If <xref linkend="#FEAT_DoPD">FEAT_DoPD</xref> is implemented, the only permitted value is <binarynumber>0b1111</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>OS Double Lock implemented. <register_link state="AArch64" id="AArch64-osdlr_el1.xml">OSDLR_EL1</register_link> is RW.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
          <para>OS Double Lock not implemented. <register_link state="AArch64" id="AArch64-osdlr_el1.xml">OSDLR_EL1</register_link> is RAZ/WI.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-35_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PMSVer</field_name>
    <field_msb>35</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>35:32</rel_range>
    <field_description order="before">
      <para>Statistical Profiling Extension version.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_SPE">FEAT_SPE</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_SPEv1p1">FEAT_SPEv1p1</xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para><xref linkend="#FEAT_SPEv1p2">FEAT_SPEv1p2</xref> implements the functionality identified by the value <binarynumber>0b0011</binarynumber>.</para>
<para><xref linkend="#FEAT_SPEv1p3">FEAT_SPEv1p3</xref> implements the functionality identified by the value <binarynumber>0b0100</binarynumber>.</para>
<para><xref linkend="#FEAT_SPEv1p4">FEAT_SPEv1p4</xref> implements the functionality identified by the value <binarynumber>0b0101</binarynumber>.</para>
<para><xref linkend="#FEAT_SPEv1p4">FEAT_SPEv1p5</xref> implements the functionality identified by the value <binarynumber>0b0110</binarynumber>.</para>
<para>From Armv8.5, if <xref linkend="#FEAT_SPE">FEAT_SPE</xref> is implemented, the value <binarynumber>0b0001</binarynumber> is not permitted.</para>
<para>From Armv8.7, if <xref linkend="#FEAT_SPE">FEAT_SPE</xref> is implemented, the value <binarynumber>0b0010</binarynumber> is not permitted.</para>
<para>From Armv8.8, if <xref linkend="#FEAT_SPE">FEAT_SPE</xref> is implemented, the value <binarynumber>0b0011</binarynumber> is not permitted.</para>
<para>From Armv8.9, if <xref linkend="#FEAT_SPE">FEAT_SPE</xref> is implemented, the value <binarynumber>0b0100</binarynumber> is not permitted.</para>
<para>From Armv9.6, if <xref linkend="#FEAT_SPE">FEAT_SPE</xref> is implemented, the value <binarynumber>0b0101</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Statistical Profiling Extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Statistical Profiling Extension implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description><para>As <binarynumber>0b0001</binarynumber>, and adds:</para>
<list type="unordered">
<listitem><content>Support for the Events packet Alignment flag.</content>
</listitem><listitem><content>If <xref linkend="#FEAT_SVE">FEAT_SVE</xref> is implemented, support for the Scalable Vector extensions to Statistical Profiling.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description><para>As <binarynumber>0b0010</binarynumber>, and adds:</para>
<list type="unordered">
<listitem><content>Discard mode.</content>
</listitem><listitem><content>Extended event filtering, including the <register_link state="AArch64" id="AArch64-pmsnevfr_el1.xml">PMSNEVFR_EL1</register_link> System register.</content>
</listitem><listitem><content>Support for the <arm-defined-word>OPTIONAL</arm-defined-word> previous branch target Address packet.</content>
</listitem><listitem><content>If <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, controls to freeze the PMU event counters after an SPE buffer management event occurs.</content>
</listitem><listitem><content>If <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, the SAMPLE_FEED_BR, SAMPLE_FEED_EVENT, SAMPLE_FEED_LAT, SAMPLE_FEED_LD, SAMPLE_FEED_OP, and SAMPLE_FEED_ST PMU events.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description><para>As <binarynumber>0b0011</binarynumber>, and adds:</para>
<list type="unordered">
<listitem><content>If <xref linkend="#FEAT_MOPS">FEAT_MOPS</xref> is implemented, Operation Type packet encodings for Memory Copy and Set operations.</content>
</listitem><listitem><content>If <xref linkend="#FEAT_MTE">FEAT_MTE</xref> is implemented, Operation Type packet encodings for loads and stores of Allocation Tags.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description><para>As <binarynumber>0b0100</binarynumber>, and adds:</para>
<list type="unordered">
<listitem><content>Support for the Events packet Level 2 Data cache access, Level 2 Data cache miss, Cached data modified, Recently fetched cache line, and Cache snoop flags.</content>
</listitem><listitem><content>Support for Data Source filtering.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description><para>As <binarynumber>0b0101</binarynumber>, and adds:</para>
<list type="unordered">
<listitem><content>If EL2 and <xref linkend="#FEAT_FGT">FEAT_FGT</xref> are implemented, a fine-grained trap on the <instruction>PSB CSYNC</instruction> instruction.</content>
</listitem><listitem><content>The SPE Profiling exception extension, <xref linkend="#FEAT_SPE_EXC">FEAT_SPE_EXC</xref>.</content>
</listitem><listitem><content>The Statistical Profiling physical addressing mode extension, <xref linkend="#FEAT_SPE_nVM">FEAT_SPE_nVM</xref>.</content>
</listitem></list></field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-31_28" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CTX_CMPs</field_name>
    <field_msb>31</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>31:28</rel_range>
    <field_description order="before">
      <para>Number of context-aware breakpoints, minus 1.</para>
    </field_description>
    <field_description order="after"><para>The value of this field is never greater than ID_AA64DFR0_EL1.BRPs.</para>
<para>If <xref linkend="#FEAT_Debugv8p9">FEAT_Debugv8p9</xref> is implemented and 16 or more context-aware breakpoints are implemented, then this field reads as <binarynumber>0b1111</binarynumber> and <register_link state="AArch64" id="AArch64-id_aa64dfr1_el1.xml">ID_AA64DFR1_EL1</register_link>.CTX_CMPs indicates the number of context-aware breakpoints.</para>
<note><para>If AArch32 is supported at EL1, then the PE does not implement more than 16 breakpoints.</para></note></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000..0b1111</field_value>
        <field_value_description>
          <para>The number of context-aware breakpoints, minus 1.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-27_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SEBEP</field_name>
    <field_msb>27</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>27:24</rel_range>
    <field_description order="before">
      <para>Synchronous-exception-based event profiling.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_SEBEP">FEAT_SEBEP</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Synchronous-exception-based event profiling not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Synchronous-exception-based event profiling implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-23_20" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>WRPs</field_name>
    <field_msb>23</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>23:20</rel_range>
    <field_description order="before">
      <para>Number of watchpoints, minus 1.</para>
    </field_description>
    <field_description order="after"><para>If <xref linkend="#FEAT_Debugv8p9">FEAT_Debugv8p9</xref> is implemented and 16 or more watchpoints are implemented, then this field reads as <binarynumber>0b1111</binarynumber> and <register_link state="AArch64" id="AArch64-id_aa64dfr1_el1.xml">ID_AA64DFR1_EL1</register_link>.WRPs indicates the number of watchpoints.</para>
<note><para>If AArch32 is supported at EL1, then the PE does not implement more than 16 watchpoints.</para></note><para>The value <binarynumber>0b0000</binarynumber> is reserved.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0001..0b1111</field_value>
        <field_value_description>
          <para>The number of watchpoints, minus 1.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-19_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PMSS</field_name>
    <field_msb>19</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>19:16</rel_range>
    <field_description order="before">
      <para>PMU Snapshot extension.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_PMUv3_SS">FEAT_PMUv3_SS</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>PMU snapshot extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>PMU snapshot extension implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-15_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>BRPs</field_name>
    <field_msb>15</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>15:12</rel_range>
    <field_description order="before">
      <para>Number of breakpoints, minus 1.</para>
    </field_description>
    <field_description order="after"><para>If <xref linkend="#FEAT_Debugv8p9">FEAT_Debugv8p9</xref> is implemented and 16 or more breakpoints are implemented, then this field reads as <binarynumber>0b1111</binarynumber> and <register_link state="AArch64" id="AArch64-id_aa64dfr1_el1.xml">ID_AA64DFR1_EL1</register_link>.BRPs indicates the number of breakpoints.</para>
<note><para>If AArch32 is supported at EL1, then the PE does not implement more than 16 breakpoints.</para></note><para>The value <binarynumber>0b0000</binarynumber> is reserved.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0001..0b1111</field_value>
        <field_value_description>
          <para>The number of breakpoints, minus 1.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-11_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PMUVer</field_name>
    <field_msb>11</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>11:8</rel_range>
    <field_description order="before"><para>Performance Monitors Extension version.</para>
<para>This field does not follow the standard ID scheme, but uses the alternative ID scheme described in <xref linkend="#BABDFEID">'Alternative ID scheme used for the Performance Monitors Extension version'</xref>.</para></field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_PMUv3p1">FEAT_PMUv3p1</xref> implements the functionality identified by the value <binarynumber>0b0100</binarynumber>.</para>
<para><xref linkend="#FEAT_PMUv3p4">FEAT_PMUv3p4</xref> implements the functionality identified by the value <binarynumber>0b0101</binarynumber>.</para>
<para><xref linkend="#FEAT_PMUv3p5">FEAT_PMUv3p5</xref> implements the functionality identified by the value <binarynumber>0b0110</binarynumber>.</para>
<para><xref linkend="#FEAT_PMUv3p7">FEAT_PMUv3p7</xref> implements the functionality identified by the value <binarynumber>0b0111</binarynumber>.</para>
<para><xref linkend="#FEAT_PMUv3p8">FEAT_PMUv3p8</xref> implements the functionality identified by the value <binarynumber>0b1000</binarynumber>.</para>
<para><xref linkend="#FEAT_PMUv3p9">FEAT_PMUv3p9</xref> implements the functionality identified by the value <binarynumber>0b1001</binarynumber>.</para>
<para>From Armv8.1, if <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, the value <binarynumber>0b0001</binarynumber> is not permitted.</para>
<para>From Armv8.4, if <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, the value <binarynumber>0b0100</binarynumber> is not permitted.</para>
<para>From Armv8.5, if <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, the value <binarynumber>0b0101</binarynumber> is not permitted.</para>
<para>From Armv8.7, if <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, the value <binarynumber>0b0110</binarynumber> is not permitted.</para>
<para>From Armv8.8, if <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, the value <binarynumber>0b0111</binarynumber> is not permitted.</para>
<para>From Armv8.9, if <xref linkend="#FEAT_PMUv3">FEAT_PMUv3</xref> is implemented, the value <binarynumber>0b1000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Performance Monitors Extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Performance Monitors Extension, PMUv3 implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description><para>PMUv3 for Armv8.1. As <binarynumber>0b0001</binarynumber>, and adds support for:</para>
<list type="unordered">
<listitem><content>Extended 16-bit <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link>.evtCount field.</content>
</listitem><listitem><content>If EL2 is implemented, the <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMD control.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
          <para>PMUv3 for Armv8.4. As <binarynumber>0b0100</binarynumber>, and adds support for the <register_link state="AArch64" id="AArch64-pmmir_el1.xml">PMMIR_EL1</register_link> register.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description><para>PMUv3 for Armv8.5. As <binarynumber>0b0101</binarynumber>, and adds support for:</para>
<list type="unordered">
<listitem><content>64-bit event counters.</content>
</listitem><listitem><content>If EL2 is implemented, the <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HCCD control.</content>
</listitem><listitem><content>If EL3 is implemented, the <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.SCCD control.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description><para>PMUv3 for Armv8.7. As <binarynumber>0b0110</binarynumber>, and adds support for:</para>
<list type="unordered">
<listitem><content>The <register_link state="AArch64" id="AArch64-pmcr_el0.xml">PMCR_EL0</register_link>.FZO and, if EL2 is implemented, <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMFZO controls.</content>
</listitem><listitem><content>If EL3 is implemented, the <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.{MPMX,MCCD} controls.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description><para>PMUv3 for Armv8.8. As <binarynumber>0b0111</binarynumber>, and:</para>
<list type="unordered">
<listitem><content>Extends the Common event number space to include <hexnumber>0x0040</hexnumber> to <hexnumber>0x00BF</hexnumber> and <hexnumber>0x4040</hexnumber> to <hexnumber>0x40BF</hexnumber>.</content>
</listitem><listitem><content>Removes the <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> behaviors if a reserved or unimplemented PMU event number is selected.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1001</field_value>
        <field_value_description><para>PMUv3 for Armv8.9. As <binarynumber>0b1000</binarynumber>, and:</para>
<list type="unordered">
<listitem><content>Updates the definitions of existing PMU events.</content>
</listitem><listitem><content>Adds support for the <register_link state="AArch64" id="AArch64-pmuserenr_el0.xml">PMUSERENR_EL0</register_link>.UEN control and the <register_link state="AArch64" id="AArch64-pmuacr_el1.xml">PMUACR_EL1</register_link> register.</content>
</listitem><listitem><content>Adds support for the <register_link state="ext" id="ext-edecr.xml">EDECR</register_link>.PME control.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
          <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> form of performance monitors supported, PMUv3 not supported. Arm does not recommend this value for new implementations.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-7_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>TraceVer</field_name>
    <field_msb>7</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>7:4</rel_range>
    <field_description order="before">
      <para>Trace support. Indicates whether System register interface to a trace unit is implemented.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>When trace unit System registers are implemented, see <register_link state="AArch64" id="AArch64-trcidr1.xml">TRCIDR1</register_link> for tracing capabilities of the trace unit.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Trace unit System registers not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Trace unit System registers implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-3_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>DebugVer</field_name>
    <field_msb>3</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Debug architecture version. Indicates presence of Armv8 debug architecture.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_Debugv8p1">FEAT_Debugv8p1</xref> implements the functionality identified by the value <binarynumber>0b0111</binarynumber>.</para>
<para><xref linkend="#FEAT_Debugv8p2">FEAT_Debugv8p2</xref> implements the functionality identified by the value <binarynumber>0b1000</binarynumber>.</para>
<para><xref linkend="#FEAT_Debugv8p4">FEAT_Debugv8p4</xref> implements the functionality identified by the value <binarynumber>0b1001</binarynumber>.</para>
<para><xref linkend="#FEAT_Debugv8p8">FEAT_Debugv8p8</xref> implements the functionality identified by the value <binarynumber>0b1010</binarynumber>.</para>
<para><xref linkend="#FEAT_Debugv8p9">FEAT_Debugv8p9</xref> implements the functionality identified by the value <binarynumber>0b1011</binarynumber>.</para>
<para>From Armv8.1, when <xref linkend="#FEAT_Debugv8p1">FEAT_Debugv8p1</xref> is implemented the value <binarynumber>0b0110</binarynumber> is not permitted.</para>
<para>From Armv8.2, the values <binarynumber>0b0110</binarynumber> and <binarynumber>0b0111</binarynumber> are not permitted.</para>
<para>From Armv8.4, the value <binarynumber>0b1000</binarynumber> is not permitted.</para>
<para>From Armv8.8, the value <binarynumber>0b1001</binarynumber> is not permitted.</para>
<para>From Armv8.9, the value <binarynumber>0b1010</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
          <para>Armv8.0 debug architecture.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
          <para>Armv8.1 debug architecture, <xref linkend="#FEAT_Debugv8p1">FEAT_Debugv8p1</xref>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description>
          <para>Armv8.2 debug architecture, <xref linkend="#FEAT_Debugv8p2">FEAT_Debugv8p2</xref>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1001</field_value>
        <field_value_description>
          <para>Armv8.4 debug architecture, <xref linkend="#FEAT_Debugv8p4">FEAT_Debugv8p4</xref>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1010</field_value>
        <field_value_description>
          <para>Armv8.8 debug architecture, <xref linkend="#FEAT_Debugv8p8">FEAT_Debugv8p8</xref>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1011</field_value>
        <field_value_description>
          <para>Armv8.9 debug architecture, <xref linkend="#FEAT_Debugv8p9">FEAT_Debugv8p9</xref>.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_60" msb="63" lsb="60"/>
  <fieldat id="fieldset_0-59_56" msb="59" lsb="56"/>
  <fieldat id="fieldset_0-55_52" msb="55" lsb="52"/>
  <fieldat id="fieldset_0-51_48" msb="51" lsb="48"/>
  <fieldat id="fieldset_0-47_44" msb="47" lsb="44"/>
  <fieldat id="fieldset_0-43_40" msb="43" lsb="40"/>
  <fieldat id="fieldset_0-39_36" msb="39" lsb="36"/>
  <fieldat id="fieldset_0-35_32" msb="35" lsb="32"/>
  <fieldat id="fieldset_0-31_28" msb="31" lsb="28"/>
  <fieldat id="fieldset_0-27_24" msb="27" lsb="24"/>
  <fieldat id="fieldset_0-23_20" msb="23" lsb="20"/>
  <fieldat id="fieldset_0-19_16" msb="19" lsb="16"/>
  <fieldat id="fieldset_0-15_12" msb="15" lsb="12"/>
  <fieldat id="fieldset_0-11_8" msb="11" lsb="8"/>
  <fieldat id="fieldset_0-7_4" msb="7" lsb="4"/>
  <fieldat id="fieldset_0-3_0" msb="3" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






    
        
        <access_mechanism accessor="MRS ID_AA64DFR0_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, ID_AA64DFR0_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0101"/>
                
                <enc n="op2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_AA64) then
    UnimplementedIDRegister();
elsif PSTATE.EL == EL0 then
    if IsFeatureImplemented(FEAT_IDST) then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ID_AA64DFR0_EL1;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ID_AA64DFR0_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = ID_AA64DFR0_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:52; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>