<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>TRBMAR_EL1</reg_short_name>
        
        <reg_long_name>Trace Buffer Memory Attribute Register</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_TRBE is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



    
      
      <reg_mapping>
        
  

    

  

    <mapped_name filename="ext-trbmar_el1.xml">TRBMAR_EL1</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>External</mapped_execution_state>
    <mapped_from_startbit>63</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>63</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="63:0">
      <range>
        <msb>63</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="63:0">
      <range>
        <msb>63</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

        <mapped_to_condition>when FEAT_TRBE_EXT is implemented</mapped_to_condition>
      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Controls Trace Buffer Unit accesses to memory.</para>

      </purpose_text>
      <purpose_text>
        <para>If the trace buffer pointers specify virtual addresses, the address properties are defined by the translation tables and this register is ignored.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>TRBE</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>TRBMAR_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>63:12</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-11_10-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>PAS</field_name>
    <field_msb>11</field_msb>
    <field_lsb>10</field_lsb>
    <rel_range>1:0</rel_range>
    <field_description order="before">
      <para>Physical address specifier. Defines the PAS attribute for memory addressed by the buffer in External mode.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>If the Trace Buffer Unit is using external mode and either TRBMAR_EL1.PAS is set to a reserved value, or the <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> authentication interface prohibits invasive debug of the Security state corresponding to the physical address space selected by TRBMAR_EL1.PAS, then when the Trace Buffer Unit receives trace data from the trace unit, it does not write the trace data to memory and generates a trace buffer management event. That is, if any of the following apply:</para>
<list type="unordered">
<listitem><content><function>ExternalInvasiveDebugEnabled()</function> == FALSE.</content>
</listitem><listitem><content>TRBMAR_EL1.PAS is <binarynumber>0b00</binarynumber>, and either <function>ExternalSecureInvasiveDebugEnabled()</function> == FALSE or Secure state is not implemented.</content>
</listitem><listitem><content>TRBMAR_EL1.PAS is <binarynumber>0b10</binarynumber>, and either <function>ExternalRootInvasiveDebugEnabled()</function> == FALSE or <xref filename="A_armv8_architecture_extensions.fm" linkend="FEAT_RME">FEAT_RME</xref> is not implemented.</content>
</listitem><listitem><content>TRBMAR_EL1.PAS is <binarynumber>0b11</binarynumber>, and either <function>ExternalRealmInvasiveDebugEnabled()</function> == FALSE or <xref filename="A_armv8_architecture_extensions.fm" linkend="FEAT_RME">FEAT_RME</xref> is not implemented.</content>
</listitem></list>
<para>This field is ignored by the PE when <function>SelfHostedTraceEnabled()</function> == TRUE.</para></field_description>
    <field_values impdef="False">
      <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
          <para>Secure.</para>
        </field_value_description>
        <field_value_condition>When Secure state is implemented</field_value_condition>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
          <para>Non-secure.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
          <para>Root.</para>
        </field_value_description>
        <field_value_condition>When FEAT_RME is implemented</field_value_condition>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
          <para>Realm.</para>
        </field_value_description>
        <field_value_condition>When FEAT_RME is implemented</field_value_condition>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_TRBE_EXT is implemented</fields_condition>
  </field>
  <field id="fieldset_0-11_10-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>11</field_msb>
    <field_lsb>10</field_lsb>
    <rel_range>11:10</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-9_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SH</field_name>
    <field_msb>9</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>9:8</rel_range>
    <field_description order="before">
      <para>Trace buffer shareability domain. Defines the shareability domain for Normal memory used by the trace buffer.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>This field is ignored when TRBMAR_EL1.Attr specifies any of the following memory types:</para>
<list type="unordered">
<listitem><content>Any Device memory type.</content>
</listitem><listitem><content>Normal memory, Inner Non-cacheable, Outer Non-cacheable.</content>
</listitem></list>
<para>All Device and Normal Inner Non-cacheable Outer Non-cacheable memory regions are always treated as Outer Shareable.</para></field_description>
    <field_values impdef="False">
      <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
          <para>Non-shareable.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
          <para>Outer Shareable.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
          <para>Inner Shareable.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_conditions>
          <field_reset_condition condition="FEAT_TRBE_EXT is implemented">
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="FEAT_TRBE_EXT is not implemented">
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-7_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Attr</field_name>
    <field_msb>7</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>7:0</rel_range>
    <field_description order="before"><para>Trace buffer memory type and attributes. Defines the memory type and, for Normal memory, the cacheability attributes, for memory addressed by the trace buffer.</para>
<para>The encoding of this field is the same as that of a <xref linkend="#MAIR_ELx">MAIR_ELx</xref>.Attr&lt;n&gt; field, as follows:</para>
<table><tgroup cols="3"><thead><row><entry>Attr</entry><entry/><entry>Meaning</entry></row></thead><tbody><row><entry>0b0000dd00</entry><entry/><entry>Device memory.
See encoding of 'dd' for the type of Device memory.</entry></row><row><entry>0b0000dd01</entry><entry/><entry>If FEAT_XS is implemented:
Device memory with the XS attribute set to 0.
See encoding of 'dd' for the type of Device memory.
Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry>0b0000dd1x</entry><entry/><entry><arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry>0booooiiii</entry><entry>where oooo != 0000
and iiii != 0000</entry><entry>Normal memory. See encoding of 'oooo' and 'iiii' for the
type of Normal memory.</entry></row><row><entry><binarynumber>0b01000000</binarynumber></entry><entry/><entry>If FEAT_XS is implemented:
Normal Inner Non-cacheable, Outer Non-cacheable memory
with the XS attribute set to 0.
Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry><binarynumber>0b10100000</binarynumber></entry><entry/><entry>If FEAT_XS is implemented:
Normal Inner Write-through Cacheable, Outer Write-through Cacheable,
Read-Allocate, No-Write Allocate, Non-transient memory
with the XS attribute set to 0.
Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry><binarynumber>0b11110000</binarynumber></entry><entry/><entry>If FEAT_MTE2 is implemented:
Tagged Normal Inner Write-Back, Outer Write-Back,
Read-Allocate, Write-Allocate Non-transient memory.
Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry><binarynumber>0bxxxx0000</binarynumber></entry><entry>where xxxx != 0000
and xxxx != 0100
and xxxx != 1010
and xxxx != 1111</entry><entry><arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row></tbody></tgroup></table>
<para><value>dd</value> is encoded as follows:</para>
<table><tgroup cols="2"><thead><row><entry>'dd'</entry><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b00</binarynumber></entry><entry>Device-nGnRnE memory.</entry></row><row><entry><binarynumber>0b01</binarynumber></entry><entry>Device-nGnRE memory.</entry></row><row><entry><binarynumber>0b10</binarynumber></entry><entry>Device-nGRE memory.</entry></row><row><entry><binarynumber>0b11</binarynumber></entry><entry>Device-GRE memory.</entry></row></tbody></tgroup></table>
<para><value>oooo</value> is encoded as follows:</para>
<table><tgroup cols="3"><thead><row><entry>'oooo'</entry><entry/><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0000</binarynumber></entry><entry/><entry>See encoding of Attr.</entry></row><row><entry>0b00RW</entry><entry>where RW != 00</entry><entry>Normal memory, Outer Write-Through Transient.</entry></row><row><entry><binarynumber>0b0100</binarynumber></entry><entry/><entry>Normal memory, Outer Non-cacheable.</entry></row><row><entry>0b01RW</entry><entry>where RW != 00</entry><entry>Normal memory, Outer Write-Back Transient.</entry></row><row><entry>0b10RW</entry><entry/><entry>Normal memory, Outer Write-Through Non-transient.</entry></row><row><entry>0b11RW</entry><entry/><entry>Normal memory, Outer Write-Back Non-transient.</entry></row></tbody></tgroup></table>
<para><value>R</value> encodes the Outer Read-Allocate policy and <value>W</value> encodes the Outer Write-Allocate policy.</para>
<para><value>iiii</value> is encoded as follows:</para>
<table><tgroup cols="3"><thead><row><entry>'iiii'</entry><entry/><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0000</binarynumber></entry><entry/><entry>See encoding of Attr.</entry></row><row><entry>0b00RW</entry><entry>where RW != 00</entry><entry>Normal memory, Inner Write-Through Transient.</entry></row><row><entry><binarynumber>0b0100</binarynumber></entry><entry/><entry>Normal memory, Inner Non-cacheable.</entry></row><row><entry>0b01RW</entry><entry>where RW != 00</entry><entry>Normal memory, Inner Write-Back Transient.</entry></row><row><entry>0b10RW</entry><entry/><entry>Normal memory, Inner Write-Through Non-transient.</entry></row><row><entry>0b11RW</entry><entry/><entry>Normal memory, Inner Write-Back Non-transient.</entry></row></tbody></tgroup></table>
<para><value>R</value> encodes the Inner Read-Allocate policy and <value>W</value> encodes the Inner Write-Allocate policy.</para>
<para>In <value>oooo</value> and <value>iiii</value>, <value>R</value> and <value>W</value> are encoded as follows:</para>
<table><tgroup cols="2"><thead><row><entry>'R' or 'W'</entry><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0</binarynumber></entry><entry>No Allocate.</entry></row><row><entry><binarynumber>0b1</binarynumber></entry><entry>Allocate.</entry></row></tbody></tgroup></table>
<para>When <xref linkend="#FEAT_XS">FEAT_XS</xref> is implemented, stage 1 Inner Write-Back Cacheable, Outer Write-Back Cacheable memory types have the XS attribute set to 0.</para></field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_conditions>
          <field_reset_condition condition="FEAT_TRBE_EXT is implemented">
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="FEAT_TRBE_EXT is not implemented">
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_12" msb="63" lsb="12"/>
  <fieldat id="fieldset_0-11_10-1" msb="11" lsb="10"/>
  <fieldat id="fieldset_0-9_8" msb="9" lsb="8"/>
  <fieldat id="fieldset_0-7_0" msb="7" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>The PE might ignore a write to TRBMAR_EL1 if any of the following apply:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>
<para><register_link state="AArch64" id="AArch64-trblimitr_el1.xml">TRBLIMITR_EL1</register_link>.E == <binarynumber>0b1</binarynumber>, and either <xref filename="A_armv8_architecture_extensions.fm" linkend="FEAT_TRBE_EXT">FEAT_TRBE_EXT</xref> is not implemented or the Trace Buffer Unit is using Self-hosted mode.</para>
</content>
</listitem><listitem><content>
<para><register_link state="AArch64" id="AArch64-trblimitr_el1.xml">TRBLIMITR_EL1</register_link>.XE == <binarynumber>0b1</binarynumber>, <xref filename="A_armv8_architecture_extensions.fm" linkend="FEAT_TRBE_EXT">FEAT_TRBE_EXT</xref> is implemented, and the Trace Buffer Unit is using External mode.</para>
</content>
</listitem></list>
      </access_permission_text>





    
        
        <access_mechanism accessor="MRS TRBMAR_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, TRBMAR_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1001"/>
                
                <enc n="CRm" v="0b1011"/>
                
                <enc n="op2" v="0b100"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_TRBE) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; (MDCR_EL3.NSTB[0] == '0' || MDCR_EL3.NSTB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSTBE != SCR_EL3.NSE)) then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGRTR_EL2.TRBMAR_EL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.E2TB IN {'x0'} then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; (MDCR_EL3.NSTB[0] == '0' || MDCR_EL3.NSTB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSTBE != SCR_EL3.NSE)) then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif IsFeatureImplemented(FEAT_TRBE_EXT) &amp;&amp; OSLSR_EL1.OSLK == '0' &amp;&amp; HaltingAllowed() &amp;&amp; EDSCR2.TTA == '1' then
        Halt(DebugHalt_SoftwareAccess);
    else
        X[t, 64] = TRBMAR_EL1;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; (MDCR_EL3.NSTB[0] == '0' || MDCR_EL3.NSTB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSTBE != SCR_EL3.NSE)) then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; (MDCR_EL3.NSTB[0] == '0' || MDCR_EL3.NSTB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSTBE != SCR_EL3.NSE)) then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif IsFeatureImplemented(FEAT_TRBE_EXT) &amp;&amp; OSLSR_EL1.OSLK == '0' &amp;&amp; HaltingAllowed() &amp;&amp; EDSCR2.TTA == '1' then
        Halt(DebugHalt_SoftwareAccess);
    else
        X[t, 64] = TRBMAR_EL1;
elsif PSTATE.EL == EL3 then
    if IsFeatureImplemented(FEAT_TRBE_EXT) &amp;&amp; OSLSR_EL1.OSLK == '0' &amp;&amp; HaltingAllowed() &amp;&amp; EDSCR2.TTA == '1' then
        Halt(DebugHalt_SoftwareAccess);
    else
        X[t, 64] = TRBMAR_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MSRregister TRBMAR_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR TRBMAR_EL1, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1001"/>
                
                <enc n="CRm" v="0b1011"/>
                
                <enc n="op2" v="0b100"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_TRBE) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; (MDCR_EL3.NSTB[0] == '0' || MDCR_EL3.NSTB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSTBE != SCR_EL3.NSE)) then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGWTR_EL2.TRBMAR_EL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.E2TB IN {'x0'} then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; (MDCR_EL3.NSTB[0] == '0' || MDCR_EL3.NSTB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSTBE != SCR_EL3.NSE)) then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif IsFeatureImplemented(FEAT_TRBE_EXT) &amp;&amp; OSLSR_EL1.OSLK == '0' &amp;&amp; HaltingAllowed() &amp;&amp; EDSCR2.TTA == '1' then
        Halt(DebugHalt_SoftwareAccess);
    else
        TRBMAR_EL1 = X[t, 64];
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; (MDCR_EL3.NSTB[0] == '0' || MDCR_EL3.NSTB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSTBE != SCR_EL3.NSE)) then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; (MDCR_EL3.NSTB[0] == '0' || MDCR_EL3.NSTB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSTBE != SCR_EL3.NSE)) then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif IsFeatureImplemented(FEAT_TRBE_EXT) &amp;&amp; OSLSR_EL1.OSLK == '0' &amp;&amp; HaltingAllowed() &amp;&amp; EDSCR2.TTA == '1' then
        Halt(DebugHalt_SoftwareAccess);
    else
        TRBMAR_EL1 = X[t, 64];
elsif PSTATE.EL == EL3 then
    if IsFeatureImplemented(FEAT_TRBE_EXT) &amp;&amp; OSLSR_EL1.OSLK == '0' &amp;&amp; HaltingAllowed() &amp;&amp; EDSCR2.TTA == '1' then
        Halt(DebugHalt_SoftwareAccess);
    else
        TRBMAR_EL1 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:53; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>