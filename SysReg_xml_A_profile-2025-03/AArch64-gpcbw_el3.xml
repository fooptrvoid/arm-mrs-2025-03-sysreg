<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>GPCBW_EL3</reg_short_name>
        
        <reg_long_name>Granule Protection Check Bypass Window Register (EL3)</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_RME_GPC3 is implemented and FEAT_AA64 is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>The control register for Granule Protection Check bypass window.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>Memory</reg_group>
            <reg_group>Root</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GPCBW_EL3 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>40</field_lsb>
    <rel_range>63:40</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-39_37" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>BWSIZE</field_name>
    <field_msb>39</field_msb>
    <field_lsb>37</field_lsb>
    <rel_range>39:37</rel_range>
    <field_description order="before"><para>GPC Bypass Window Size.</para>
<para>BWSIZE defines the size of the GPC bypass memory region.</para></field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>This field is permitted to be cached in a TLB.</para></field_description>
    <field_values impdef="False">
      <field_value_instance>
        <field_value>0b000</field_value>
        <field_value_description>
          <para>30 bits, 1GB GPC bypass window.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b001</field_value>
        <field_value_description>
          <para>31 bits, 2GB GPC bypass window.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b010</field_value>
        <field_value_description>
          <para>32 bits, 4GB GPC bypass window.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b011</field_value>
        <field_value_description>
          <para>34 bits, 16GB GPC bypass window.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b100</field_value>
        <field_value_description>
          <para>36 bits, 64GB GPC bypass window.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-36_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>BWSTRIDE</field_name>
    <field_msb>36</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>36:32</rel_range>
    <field_description order="before"><para>GPC Bypass Window Stride.</para>
<para>BWSTRIDE allows creating multiple GPC bypass memory regions in the memory map across a specific stride.</para></field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>This field is permitted to be cached in a TLB.</para></field_description>
    <field_values impdef="False">
      <field_value_instance>
        <field_value>0b00000</field_value>
        <field_value_description>
          <para>1TB stride.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b00010</field_value>
        <field_value_description>
          <para>4TB stride.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b00100</field_value>
        <field_value_description>
          <para>16TB stride.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b00110</field_value>
        <field_value_description>
          <para>64TB stride.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b00111</field_value>
        <field_value_description>
          <para>128TB stride.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b01000</field_value>
        <field_value_description>
          <para>256TB stride.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b01001</field_value>
        <field_value_description>
          <para>512TB stride.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b01010</field_value>
        <field_value_description>
          <para>1PB stride.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b10000</field_value>
        <field_value_description>
          <para>64PB (No stride).</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-31_26" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>31</field_msb>
    <field_lsb>26</field_lsb>
    <rel_range>31:26</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-25_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>BWADDR</field_name>
    <field_msb>25</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>25:0</rel_range>
    <field_description order="before"><para>GPC Bypass window address.</para>
<para>This field represents bits [55:30] of the GPC bypass window base address.</para>
<para>The GPC bypass window is:</para>
<list type="unordered">
<listitem><content>Aligned in memory to the size of the window as specified by GPCBW_EL3.BWSIZE.</content>
</listitem><listitem><content>Duplicated in PA space across a stride specified using GPCBW_EL3.BWSTRIDE.</content>
</listitem></list>
<para>This means that only bits [gpcbwu:gpcbwl] of a PA are compared against bits [gpcbwu:gpcbwl] of the window base address derived from BWADDR when checking if a PA falls within the range of a window, where:</para>
<list type="unordered">
<listitem><content>gpcbwl is derived from GPCBW_EL3.BWSIZE as follows:</content>
</listitem></list>
<table><tgroup cols="2"><thead><row><entry>BWSIZE</entry><entry>gpcbwl</entry></row></thead><tbody><row><entry><binarynumber>0b000</binarynumber></entry><entry>30</entry></row><row><entry><binarynumber>0b001</binarynumber></entry><entry>31</entry></row><row><entry><binarynumber>0b010</binarynumber></entry><entry>32</entry></row><row><entry><binarynumber>0b100</binarynumber></entry><entry>34</entry></row><row><entry><binarynumber>0b110</binarynumber></entry><entry>36</entry></row></tbody></tgroup></table>
<list type="unordered">
<listitem><content>gpcbwu is derived from GPCBW_EL3.BWSTRIDE as follows:</content>
</listitem></list>
<table><tgroup cols="2"><thead><row><entry>BWSTRIDE</entry><entry>gpcbwu</entry></row></thead><tbody><row><entry><binarynumber>0b00000</binarynumber></entry><entry>39</entry></row><row><entry><binarynumber>0b00010</binarynumber></entry><entry>41</entry></row><row><entry><binarynumber>0b00100</binarynumber></entry><entry>43</entry></row><row><entry><binarynumber>0b00110</binarynumber></entry><entry>45</entry></row><row><entry><binarynumber>0b00111</binarynumber></entry><entry>46</entry></row><row><entry><binarynumber>0b01000</binarynumber></entry><entry>47</entry></row><row><entry><binarynumber>0b01001</binarynumber></entry><entry>48</entry></row><row><entry><binarynumber>0b01010</binarynumber></entry><entry>49</entry></row><row><entry><binarynumber>0b10000</binarynumber></entry><entry>55</entry></row></tbody></tgroup></table>
<para>If the base address derived from BWADDR is not aligned to the size programmed in BWSIZE the configuration is invalid.</para>
<para>An access to a PA falls within a GPC bypass window if the pseudocode function <function>PAWithinGPCBypassWindow()</function> returns TRUE.</para></field_description>
    <field_description order="after">
      <para>This field is permitted to be cached in a TLB.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_40" msb="63" lsb="40"/>
  <fieldat id="fieldset_0-39_37" msb="39" lsb="37"/>
  <fieldat id="fieldset_0-36_32" msb="36" lsb="32"/>
  <fieldat id="fieldset_0-31_26" msb="31" lsb="26"/>
  <fieldat id="fieldset_0-25_0" msb="25" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






    
        
        <access_mechanism accessor="MRS GPCBW_EL3" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, GPCBW_EL3</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b110"/>
                
                <enc n="CRn" v="0b0010"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="op2" v="0b101"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_RME_GPC3) &amp;&amp; IsFeatureImplemented(FEAT_AA64)) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    X[t, 64] = GPCBW_EL3;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MSRregister GPCBW_EL3" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR GPCBW_EL3, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b110"/>
                
                <enc n="CRn" v="0b0010"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="op2" v="0b101"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_RME_GPC3) &amp;&amp; IsFeatureImplemented(FEAT_AA64)) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    if IsFeatureImplemented(FEAT_FGWTE3) &amp;&amp; FGWTE3_EL3.GPCBW_EL3 == '1' then
        AArch64.SystemAccessTrap(EL3, 0x18);
    else
        GPCBW_EL3 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:52; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>