<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>ID_AA64ISAR3_EL1</reg_short_name>
        
        <reg_long_name>AArch64 Instruction Set Attribute Register 3</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_AA64 is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Provides information about the features and instructions implemented in AArch64 state.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers, see <xref linkend="#BABFAFHI">'Principles of the ID scheme for fields in ID registers'</xref>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Identification Registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <note><para>Prior to the introduction of the features described by this register, this register was unnamed and reserved, <arm-defined-word>RES0</arm-defined-word> from EL1, EL2, and EL3.</para></note>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ID_AA64ISAR3_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>63:32</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-31_28" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>FPRCVT</field_name>
    <field_msb>31</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>31:28</rel_range>
    <field_description order="before"><para>Indicates support for the following conversions between floating-point and integer instructions with only scalar SIMD&amp;FP register operands and results, and with different input and output register sizes:</para>
<list type="unordered">
<listitem><content><instruction>FCVTAS</instruction> (scalar SIMD&amp;FP), <instruction>FCVTAU</instruction> (scalar SIMD&amp;FP).</content>
</listitem><listitem><content><instruction>FCVTMS</instruction> (scalar SIMD&amp;FP), <instruction>FCVTMU</instruction> (scalar SIMD&amp;FP).</content>
</listitem><listitem><content><instruction>FCVTNS</instruction> (scalar SIMD&amp;FP), <instruction>FCVTNU</instruction> (scalar SIMD&amp;FP).</content>
</listitem><listitem><content><instruction>FCVTPS</instruction> (scalar SIMD&amp;FP), <instruction>FCVTPU</instruction> (scalar SIMD&amp;FP).</content>
</listitem><listitem><content><instruction>FCVTZS</instruction> (scalar SIMD&amp;FP), <instruction>FCVTZU</instruction> (scalar SIMD&amp;FP).</content>
</listitem><listitem><content><instruction>SCVTF</instruction> (scalar SIMD&amp;FP), <instruction>UCVTF</instruction> (scalar SIMD&amp;FP).</content>
</listitem></list>
<para>If <xref linkend="#FEAT_SME2p1">FEAT_SME2p1</xref> is implemented, FEAT_FPRCVT indicates support for the following conversions between floating-point and integer instructions with only scalar SIMD&amp;FP register operands and results, and with the same input and output register sizes when the PE is in Streaming SVE mode:</para>
<list type="unordered">
<listitem><content><instruction>FCVTAS</instruction> (vector), <instruction>FCVTAU</instruction> (vector).</content>
</listitem><listitem><content><instruction>FCVTMS</instruction> (vector), <instruction>FCVTMU</instruction> (vector).</content>
</listitem><listitem><content><instruction>FCVTNS</instruction> (vector), <instruction>FCVTNU</instruction> (vector).</content>
</listitem><listitem><content><instruction>FCVTPS</instruction> (vector), <instruction>FCVTPU</instruction> (vector).</content>
</listitem><listitem><content><instruction>FCVTZS</instruction> (vector), <instruction>FCVTZU</instruction> (vector).</content>
</listitem><listitem><content><instruction>SCVTF</instruction> (vector), <instruction>UCVTF</instruction> (vector).</content>
</listitem></list></field_description>
    <field_description order="after"><para><xref linkend="#FEAT_FPRCVT">FEAT_FPRCVT</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv9.6, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The specified instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The specified instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-27_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>LSUI</field_name>
    <field_msb>27</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>27:24</rel_range>
    <field_description order="before"><para>Support for the following load and store unprivileged instructions:</para>
<list type="unordered">
<listitem><content><instruction>LDTXR</instruction>, <instruction>STTXR</instruction>.</content>
</listitem><listitem><content><instruction>CAST</instruction>, <instruction>CASAT</instruction>, <instruction>CASALT</instruction>, <instruction>CASLT</instruction>.</content>
</listitem><listitem><content><instruction>CASP</instruction>, <instruction>CASPA</instruction>, <instruction>CASPAL</instruction>, <instruction>CASPL</instruction>.</content>
</listitem><listitem><content><instruction>LDTP</instruction>, <instruction>STTP</instruction>.</content>
</listitem><listitem><content><instruction>LDTP (SIMD&amp;FP)</instruction>, <instruction>STTP (SIMD&amp;FP)</instruction>.</content>
</listitem><listitem><content><instruction>LDTNP</instruction>, <instruction>STTNP</instruction>.</content>
</listitem><listitem><content><instruction>LDTNP (SIMD&amp;FP)</instruction>, <instruction>STTNP (SIMD&amp;FP)</instruction>.</content>
</listitem></list></field_description>
    <field_description order="after">
      <para><xref linkend="#FEAT_LSUI">FEAT_LSUI</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
    </field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The specified instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The specified instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-23_20" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>OCCMO</field_name>
    <field_msb>23</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>23:20</rel_range>
    <field_description order="before"><para>Indicates support for the following cache maintenance operation to the Outer cache level instructions:</para>
<list type="unordered">
<listitem><content><instruction>DC CIVAOC</instruction>.</content>
</listitem><listitem><content><instruction>DC CVAOC</instruction>.</content>
</listitem></list>
<para>If <xref linkend="#FEAT_MTE">FEAT_MTE</xref> is implemented:</para>
<list type="unordered">
<listitem><content><instruction>DC CIGDVAOC</instruction>.</content>
</listitem><listitem><content><instruction>DC CGDVAOC</instruction>.</content>
</listitem></list></field_description>
    <field_description order="after"><para><xref linkend="#FEAT_OCCMO">FEAT_OCCMO</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv9.6, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The specified instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The specified instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-19_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>LSFE</field_name>
    <field_msb>19</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>19:16</rel_range>
    <field_description order="before"><para>Indicates support for the following A64 Base atomic floating-point in-memory instructions:</para>
<list type="unordered">
<listitem><content>Floating-point atomic add in memory: <instruction>LDFADD</instruction>, <instruction>LDFADDA</instruction>, <instruction>LDFADDAL</instruction>, and <instruction>LDFADDL</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic add in memory: <instruction>LDBFADD</instruction>, <instruction>LDBFADDA</instruction>, <instruction>LDBFADDAL</instruction>, and <instruction>LDBFADDL</instruction>.</content>
</listitem><listitem><content>Floating-point atomic maximum in memory: <instruction>LDFMAX</instruction>, <instruction>LDFMAXA</instruction>, <instruction>LDFMAXAL</instruction>, and <instruction>LDFMAXL</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic maximum in memory: <instruction>LDBFMAX</instruction>, <instruction>LDBFMAXA</instruction>, <instruction>LDBFMAXAL</instruction>, and <instruction>LDBFMAXL</instruction>.</content>
</listitem><listitem><content>Floating-point atomic maximum number in memory: <instruction>LDFMAXNM</instruction>, <instruction>LDFMAXNMA</instruction>, <instruction>LDFMAXNMAL</instruction>, and <instruction>LDFMAXNML</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic maximum number in memory: <instruction>LDBFMAXNM</instruction>, <instruction>LDBFMAXNMA</instruction>, <instruction>LDBFMAXNMAL</instruction>, and <instruction>LDBFMAXNML</instruction>.</content>
</listitem><listitem><content>Floating-point atomic minimum in memory: <instruction>LDFMIN</instruction>, <instruction>LDFMINA</instruction>, <instruction>LDFMINAL</instruction>, and <instruction>LDFMINL</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic minimum in memory: <instruction>LDBFMIN</instruction>, <instruction>LDBFMINA</instruction>, <instruction>LDBFMINAL</instruction>, and <instruction>LDBFMINL</instruction>.</content>
</listitem><listitem><content>Floating-point atomic minimum number in memory: <instruction>LDFMINNM</instruction>, <instruction>LDFMINNMA</instruction>, <instruction>LDFMINNMAL</instruction>, and <instruction>LDFMINNML</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic minimum number in memory: <instruction>LDBFMINNM</instruction>, <instruction>LDBFMINNMA</instruction>, <instruction>LDBFMINNMAL</instruction>, and <instruction>LDBFMINNML</instruction>.</content>
</listitem><listitem><content>Floating-point atomic add in memory, without return: <instruction>STFADD</instruction> and <instruction>STFADDL</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic add in memory, without return: <instruction>STBFADD</instruction> and <instruction>STBFADDL</instruction>.</content>
</listitem><listitem><content>Floating-point atomic maximum in memory, without return: <instruction>STFMAX</instruction> and <instruction>STFMAXL</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic maximum in memory, without return: <instruction>STBFMAX</instruction> and <instruction>STBFMAXL</instruction>.</content>
</listitem><listitem><content>Floating-point atomic maximum number in memory, without return: <instruction>STFMAXNM</instruction> and <instruction>STFMAXNML</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic maximum number in memory, without return: <instruction>STBFMAXNM</instruction> and <instruction>STBFMAXNML</instruction>.</content>
</listitem><listitem><content>Floating-point atomic minimum in memory, without return: <instruction>STFMIN</instruction> and <instruction>STFMINL</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic minimum in memory, without return: <instruction>STBFMIN</instruction> and <instruction>STBFMINL</instruction>.</content>
</listitem><listitem><content>Floating-point atomic minimum number in memory, without return: <instruction>STFMINNM</instruction> and <instruction>STFMINNML</instruction>.</content>
</listitem><listitem><content>BFloat16 atomic minimum number in memory, without return: <instruction>STBFMINNM</instruction> and <instruction>STBFMINNML</instruction>.</content>
</listitem></list></field_description>
    <field_description order="after">
      <para><xref linkend="#FEAT_LSFE">FEAT_LSFE</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber></para>
    </field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Atomic floating-point in-memory instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The specified Atomic floating-point in-memory instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-15_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PACM</field_name>
    <field_msb>15</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>15:12</rel_range>
    <field_description order="before">
      <para>Indicates the implementation of PSTATE.PACM.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_PAuth_LR">FEAT_PAuth_LR</xref> implements the functionality identified by the values <binarynumber>0b0001</binarynumber> and <binarynumber>0b0010</binarynumber>.</para>
<para>If <xref linkend="#FEAT_PAuth_LR">FEAT_PAuth_LR</xref> is implemented, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>If <register_link state="AArch64" id="AArch64-id_aa64isar1_el1.xml">ID_AA64ISAR1_EL1</register_link>.API is <binarynumber>0b0000</binarynumber>, the value <binarynumber>0b0001</binarynumber> is not permitted.</para>
<para>If one of <xref linkend="#FEAT_PACQARMA3">FEAT_PACQARMA3</xref> or <xref linkend="#FEAT_PACQARMA5">FEAT_PACQARMA5</xref> are implemented, the value <binarynumber>0b0001</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>PSTATE.PACM is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Trivial implementation of PSTATE.PACM.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>Full implementation of PSTATE.PACM.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-11_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>TLBIW</field_name>
    <field_msb>11</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>11:8</rel_range>
    <field_description order="before">
      <para>Support for <instruction>TLBI VMALL</instruction> for Dirty state.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_TLBIW">FEAT_TLBIW</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para><instruction>TLBI VMALL</instruction> for Dirty state is not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><instruction>TLBI VMALL</instruction> for Dirty state is supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-7_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>FAMINMAX</field_name>
    <field_msb>7</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>7:4</rel_range>
    <field_description order="before"><para>Indicates support for the following Advanced SIMD, SVE2, and SME2 instructions that compute maximum and minimum absolute value:</para>
<list type="unordered">
<listitem><content>When Advanced SIMD is implemented, the Advanced SIMD instructions <instruction>FAMAX</instruction> and <instruction>FAMIN</instruction>.</content>
</listitem><listitem><content>When <xref linkend="#FEAT_SVE2">FEAT_SVE2</xref> or <xref linkend="#FEAT_SME2">FEAT_SME2</xref> is implemented, the SVE2 instructions <instruction>FAMAX</instruction> and <instruction>FAMIN</instruction>.</content>
</listitem><listitem><content>When <xref linkend="#FEAT_SME2">FEAT_SME2</xref> is implemented, the SME2 instructions <instruction>FAMAX</instruction> (multiple and single vectors), <instruction>FAMIN</instruction> (multiple and single vectors), <instruction>FAMAX</instruction> (multiple vectors), and <instruction>FAMIN</instruction> (multiple vectors).</content>
</listitem></list></field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_FAMINMAX">FEAT_FAMINMAX</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The specified instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The specified instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-3_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CPA</field_name>
    <field_msb>3</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Indicates support for Checked Pointer Arithmetic instructions.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_CPA">FEAT_CPA</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_CPA2">FEAT_CPA2</xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv9.5, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Checked Pointer Arithmetic instructions are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Checked Pointer Arithmetic instructions are implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>Checked Pointer Arithmetic instructions are implemented, and Checked Pointer Arithmetic can be enabled.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_32" msb="63" lsb="32"/>
  <fieldat id="fieldset_0-31_28" msb="31" lsb="28"/>
  <fieldat id="fieldset_0-27_24" msb="27" lsb="24"/>
  <fieldat id="fieldset_0-23_20" msb="23" lsb="20"/>
  <fieldat id="fieldset_0-19_16" msb="19" lsb="16"/>
  <fieldat id="fieldset_0-15_12" msb="15" lsb="12"/>
  <fieldat id="fieldset_0-11_8" msb="11" lsb="8"/>
  <fieldat id="fieldset_0-7_4" msb="7" lsb="4"/>
  <fieldat id="fieldset_0-3_0" msb="3" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






    
        
        <access_mechanism accessor="MRS ID_AA64ISAR3_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, ID_AA64ISAR3_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0110"/>
                
                <enc n="op2" v="0b011"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_AA64) then
    UnimplementedIDRegister();
elsif PSTATE.EL == EL0 then
    if IsFeatureImplemented(FEAT_IDST) then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; (IsFeatureImplemented(FEAT_FGT) || !IsZero(ID_AA64ISAR3_EL1) || boolean IMPLEMENTATION_DEFINED "ID_AA64ISAR3_EL1 trapped by HCR_EL2.TID3") &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ID_AA64ISAR3_EL1;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ID_AA64ISAR3_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = ID_AA64ISAR3_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:52; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>