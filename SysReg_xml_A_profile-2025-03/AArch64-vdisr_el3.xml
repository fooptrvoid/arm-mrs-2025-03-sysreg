<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>VDISR_EL3</reg_short_name>
        
        <reg_long_name>Virtual Deferred Interrupt Status Register (EL3)</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_E3DSE is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Records that a delegated SError exception has been consumed by an <instruction>ESB</instruction> instruction executed at EL2 or EL1 when the Effective value of <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.DSE is 1.</para>

      </purpose_text>
      <purpose_text>
        <para>An indirect write to VDISR_EL3 made by an <instruction>ESB</instruction> instruction does not require an explicit synchronization operation for the value written to be observed by a direct read of <register_link state="AArch64" id="AArch64-disr_el1.xml">DISR_EL1</register_link> occurring in program order after the <instruction>ESB</instruction> instruction.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>RAS</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <note><para>The encoding for this register is subject to change.</para></note>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>VDISR_EL3 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>63:32</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-31_31" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>A</field_name>
    <field_msb>31</field_msb>
    <field_lsb>31</field_lsb>
    <rel_range>31</rel_range>
    <field_description order="before">
      <para>Set to 1 when an <instruction>ESB</instruction> instruction defers a delegated SError exception.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-30_25" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>30</field_msb>
    <field_lsb>25</field_lsb>
    <rel_range>30:25</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-24_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IDS</field_name>
    <field_msb>24</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>24</rel_range>
    <field_description order="before">
      <para>The value copied from <register_link state="AArch64" id="AArch64-vsesr_el3.xml">VSESR_EL3</register_link>.IDS.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-23_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>ISS</field_name>
    <field_msb>23</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>23:0</rel_range>
    <field_description order="before">
      <para>The value copied from <register_link state="AArch64" id="AArch64-vsesr_el3.xml">VSESR_EL3</register_link>.ISS.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_32" msb="63" lsb="32"/>
  <fieldat id="fieldset_0-31_31" msb="31" lsb="31"/>
  <fieldat id="fieldset_0-30_25" msb="30" lsb="25"/>
  <fieldat id="fieldset_0-24_24" msb="24" lsb="24"/>
  <fieldat id="fieldset_0-23_0" msb="23" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>An indirect write to VDISR_EL3 made by an <instruction>ESB</instruction> instruction does not require an explicit synchronization operation for the value that is written to be observed by a direct read of <register_link state="AArch64" id="AArch64-disr_el1.xml">DISR_EL1</register_link> occurring in program order after the <instruction>ESB</instruction> instruction.</para>

      </access_permission_text>
      <access_permission_text>
        <note><para>The accessibility pseudocode for <register_link state="AArch64" id="AArch64-disr_el1.xml">DISR_EL1</register_link> has not been updated to show the effect of VDISR_EL3.</para></note>
      </access_permission_text>





    
        
        <access_mechanism accessor="MRS VDISR_EL3" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, VDISR_EL3</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b110"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_E3DSE) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    X[t, 64] = VDISR_EL3;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MSRregister VDISR_EL3" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR VDISR_EL3, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b110"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_E3DSE) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    VDISR_EL3 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MRS DISR_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, DISR_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_RAS) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; (HCR_EL2.AMO == '1' || (IsFeatureImplemented(FEAT_DoubleFault2) &amp;&amp; IsHCRXEL2Enabled() &amp;&amp; HCRX_EL2.TMEA == '1')) then
        X[t, 64] = VDISR_EL2;
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_E3DSE) &amp;&amp; SCR_EL3.EnDSE == '1' then
        X[t, 64] = VDISR_EL3;
    elsif HaveEL(EL3) &amp;&amp; !Halted() &amp;&amp; SCR_EL3.EA == '1' then
        X[t, 64] = Zeros(64);
    else
        X[t, 64] = DISR_EL1;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_E3DSE) &amp;&amp; SCR_EL3.EnDSE == '1' then
        X[t, 64] = VDISR_EL3;
    elsif HaveEL(EL3) &amp;&amp; !Halted() &amp;&amp; SCR_EL3.EA == '1' then
        X[t, 64] = Zeros(64);
    else
        X[t, 64] = DISR_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = DISR_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MSRregister DISR_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR DISR_EL1, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_RAS) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; (HCR_EL2.AMO == '1' || (IsFeatureImplemented(FEAT_DoubleFault2) &amp;&amp; IsHCRXEL2Enabled() &amp;&amp; HCRX_EL2.TMEA == '1')) then
        VDISR_EL2 = X[t, 64];
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_E3DSE) &amp;&amp; SCR_EL3.EnDSE == '1' then
        VDISR_EL3 = X[t, 64];
    elsif HaveEL(EL3) &amp;&amp; !Halted() &amp;&amp; SCR_EL3.EA == '1' then
        return;
    else
        DISR_EL1 = X[t, 64];
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_E3DSE) &amp;&amp; SCR_EL3.EnDSE == '1' then
        VDISR_EL3 = X[t, 64];
    elsif HaveEL(EL3) &amp;&amp; !Halted() &amp;&amp; SCR_EL3.EA == '1' then
        return;
    else
        DISR_EL1 = X[t, 64];
elsif PSTATE.EL == EL3 then
    DISR_EL1 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:53; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>