<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>MPAMBWCAP_EL2</reg_short_name>
        
        <reg_long_name>MPAM PE-side Maximum-bandwidth Limit Virtualization Register</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_MPAM_PE_BW_CTRL is implemented and MPAMIDR_EL1.HAS_HCR == 1</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Allows software executing at EL2 to provide <register_link state="AArch64" id="AArch64-mpambwcap_el2.xml">MPAMBWCAP_EL2</register_link>.CAP as an upper bound to <register_link state="AArch64" id="AArch64-mpambw1_el1.xml">MPAMBW1_EL1</register_link>.MAX.</para>

      </purpose_text>
      <purpose_text>
        <para>If FEAT_SME is implemented, the upper bound also applies to <register_link state="AArch64" id="AArch64-mpambwsm_el1.xml">MPAMBWSM_EL1</register_link>.MAX when executing at EL1: the maximum bandwidth allowed for the PE is MIN(<register_link state="AArch64" id="AArch64-mpambwsm_el1.xml">MPAMBWSM_EL1</register_link>.MAX, <register_link state="AArch64" id="AArch64-mpambwcap_el2.xml">MPAMBWCAP_EL2</register_link>.CAP).</para>

      </purpose_text>
      <purpose_text>
        <para>If the Effective value of <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.{E2H,TGE} is not {1,1}:</para>

      </purpose_text>
      <purpose_text>
        <list type="unordered">
<listitem><content>The upper bound also applies to <register_link state="AArch64" id="AArch64-mpambw0_el1.xml">MPAMBW0_EL1</register_link>.MAX: the maximum bandwidth allowed for the PE is MIN(<register_link state="AArch64" id="AArch64-mpambw0_el1.xml">MPAMBW0_EL1</register_link>.MAX, <register_link state="AArch64" id="AArch64-mpambwcap_el2.xml">MPAMBWCAP_EL2</register_link>.CAP).</content>
</listitem><listitem><content>If FEAT_SME is implemented, the upper bound also applies to <register_link state="AArch64" id="AArch64-mpambwsm_el1.xml">MPAMBWSM_EL1</register_link>.MAX when executing at EL0: the maximum bandwidth allowed for the PE is MIN(<register_link state="AArch64" id="AArch64-mpambwsm_el1.xml">MPAMBWSM_EL1</register_link>.MAX, <register_link state="AArch64" id="AArch64-mpambwcap_el2.xml">MPAMBWCAP_EL2</register_link>.CAP).</content>
</listitem></list>

      </purpose_text>
      <purpose_text>
        <para>If <register_link state="AArch64" id="AArch64-mpambwcap_el2.xml">MPAMBWCAP_EL2</register_link>.ENABLED is 1, a PARTID that has used more than min(CAP,MAX) is given no access to additional bandwidth.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>MPAM</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>This register has no effect if EL2 is not enabled in the current Security state.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>MPAMBWCAP_EL2 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_63-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>HW_SCALE_ENABLE</field_name>
    <field_msb>63</field_msb>
    <field_lsb>63</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Enables hardware bandwidth scaling of the <register_link state="AArch64" id="AArch64-mpambwcap_el2.xml">MPAMBWCAP_EL2</register_link>.CAP value.</para>
    </field_description>
    <field_values impdef="False">
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>PE-side memory bandwidth control hardware scaling for EL2 capping is disabled.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>PE-side memory bandwidth control hardware scaling for EL2 capping is enabled.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When MPAMBWIDR_EL1.HAS_HW_SCALE == 1</fields_condition>
  </field>
  <field id="fieldset_0-63_63-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>63</field_lsb>
    <rel_range>63</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-62_62" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>ENABLED</field_name>
    <field_msb>62</field_msb>
    <field_lsb>62</field_lsb>
    <rel_range>62</rel_range>
    <field_description order="before">
      <para>Enables the PE-side memory bandwidth control capping by EL2.</para>
    </field_description>
    <field_values impdef="False">
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The PE-side memory bandwidth control capping by EL2 is disabled.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The PE-side memory bandwidth control capping by EL2 is enabled.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="the highest implemented Exception level is EL2">
            <field_reset>
              <field_reset_number>'0'</field_reset_number>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-61_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>61</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>61:32</rel_range>
    <field_description order="before"/>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-31_0" has_partial_fieldset="True" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CAP</field_name>
    <field_msb>31</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>31:0</rel_range>
    <field_description order="before"/>
    <partial_fieldset>
      <fields id="fieldset_0-31_0_0" length="32">
        <fields_condition>When MPAMBWIDR_EL1.HAS_HW_SCALE == 1 and MPAMBWCAP_EL2.HW_SCALE_ENABLE == 1</fields_condition>
        <text_before_fields/>
        <field id="fieldset_0-31_0_0-31_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
          <field_name>CAP</field_name>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <rel_range>31:0</rel_range>
          <field_description order="before"><para>Upper bound to the maximum memory bandwidth allocated to the current PARTID in <register_link state="AArch64" id="AArch64-mpambw1_el1.xml">MPAMBW1_EL1</register_link>.MAX, <register_link state="AArch64" id="AArch64-mpambw0_el1.xml">MPAMBW0_EL1</register_link>.MAX and <register_link state="AArch64" id="AArch64-mpambwsm_el1.xml">MPAMBWSM_EL1</register_link>.MAX.</para>
<para>The value is represented as a multiplier of the available bandwidth for the PE. The value is represented in base-2 fixed-point format.</para>
<para>Bits [31:16] represent the integer part of the value.</para>
<para>Bits [15:(16 - <register_link state="AArch64" id="AArch64-mpambwidr_el1.xml">MPAMBWIDR_EL1</register_link>.BWA_WD)] represent the fractional part of the value. When <register_link state="AArch64" id="AArch64-mpambwidr_el1.xml">MPAMBWIDR_EL1</register_link>.BWA_WD indicates a width less than 16 bits, bits [(15 - <register_link state="AArch64" id="AArch64-mpambwidr_el1.xml">MPAMBWIDR_EL1</register_link>.BWA_WD):0] are <arm-defined-word>RES0</arm-defined-word>.</para>
<para>The value set in the MAX field must be less than or equal to this upper bound.</para></field_description>
          <field_resets>
            <field_reset reset_type="Warm">
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_resets>
        </field>
        <text_after_fields/>
      </fields>
      <reg_fieldset length="32">
        <fields_condition>When MPAMBWIDR_EL1.HAS_HW_SCALE == 1 and MPAMBWCAP_EL2.HW_SCALE_ENABLE == 1</fields_condition>
        <fieldat id="fieldset_0-31_0_0-31_0" msb="31" lsb="0"/>
      </reg_fieldset>
    </partial_fieldset>
    <partial_fieldset>
      <fields id="fieldset_0-31_0_1" length="32">
        <fields_condition>When MPAMBWIDR_EL1.HAS_HW_SCALE == 0 or MPAMBWCAP_EL2.HW_SCALE_ENABLE == 0</fields_condition>
        <text_before_fields/>
        <field id="fieldset_0-31_0_1-31_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
          <field_msb>31</field_msb>
          <field_lsb>16</field_lsb>
          <rel_range>31:16</rel_range>
          <field_description order="before"/>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
        </field>
        <field id="fieldset_0-31_0_1-15_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
          <field_name>CAP</field_name>
          <field_msb>15</field_msb>
          <field_lsb>0</field_lsb>
          <rel_range>15:0</rel_range>
          <field_description order="before"><para>Upper bound to the maximum memory bandwidth allocated to the current PARTID in <register_link state="AArch64" id="AArch64-mpambw1_el1.xml">MPAMBW1_EL1</register_link>.MAX, <register_link state="AArch64" id="AArch64-mpambw0_el1.xml">MPAMBW0_EL1</register_link>.MAX and <register_link state="AArch64" id="AArch64-mpambwsm_el1.xml">MPAMBWSM_EL1</register_link>.MAX.</para>
<para>The value is represented as a fraction of the available bandwidth for the PE. The value is represented in base-2 fixed-point format.</para>
<para>Bits [15:(16 - <register_link state="AArch64" id="AArch64-mpambwidr_el1.xml">MPAMBWIDR_EL1</register_link>.BWA_WD)] represent the fractional part of the value. When <register_link state="AArch64" id="AArch64-mpambwidr_el1.xml">MPAMBWIDR_EL1</register_link>.BWA_WD indicates a width less than 16 bits, bits [(15 - <register_link state="AArch64" id="AArch64-mpambwidr_el1.xml">MPAMBWIDR_EL1</register_link>.BWA_WD):0] are <arm-defined-word>RES0</arm-defined-word>.</para>
<para>The value set in the MAX field must be less than or equal to this upper bound.</para></field_description>
          <field_resets>
            <field_reset reset_type="Warm">
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_resets>
        </field>
        <text_after_fields/>
      </fields>
      <reg_fieldset length="32">
        <fields_condition>When MPAMBWIDR_EL1.HAS_HW_SCALE == 0 or MPAMBWCAP_EL2.HW_SCALE_ENABLE == 0</fields_condition>
        <fieldat id="fieldset_0-31_0_1-31_16" msb="31" lsb="16"/>
        <fieldat id="fieldset_0-31_0_1-15_0" msb="15" lsb="0"/>
      </reg_fieldset>
    </partial_fieldset>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_63-1" msb="63" lsb="63"/>
  <fieldat id="fieldset_0-62_62" msb="62" lsb="62"/>
  <fieldat id="fieldset_0-61_32" msb="61" lsb="32"/>
  <fieldat id="fieldset_0-31_0" msb="31" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






    
        
        <access_mechanism accessor="MRS MPAMBWCAP_EL2" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, MPAMBWCAP_EL2</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b100"/>
                
                <enc n="CRn" v="0b1010"/>
                
                <enc n="CRm" v="0b0101"/>
                
                <enc n="op2" v="0b110"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_MPAM_PE_BW_CTRL) &amp;&amp; MPAMIDR_EL1.HAS_HCR == '1') then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EffectiveHCR_EL2_NVx() IN {'1x1'} then
        X[t, 64] = NVMem[0x910];
    elsif EffectiveHCR_EL2_NVx() IN {'xx1'} then
        if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
            if EL3SDDUndef() then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        elsif HaveEL(EL3) &amp;&amp; MPAMBW3_EL3.nTRAPLOWER == '0' then
            if EL3SDDUndef() then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        else
            AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; MPAMBW3_EL3.nTRAPLOWER == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MPAMBW3_EL3.nTRAPLOWER == '0' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = MPAMBWCAP_EL2;
elsif PSTATE.EL == EL3 then
    X[t, 64] = MPAMBWCAP_EL2;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
    
        
        <access_mechanism accessor="MSRregister MPAMBWCAP_EL2" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR MPAMBWCAP_EL2, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b100"/>
                
                <enc n="CRn" v="0b1010"/>
                
                <enc n="CRm" v="0b0101"/>
                
                <enc n="op2" v="0b110"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if !(IsFeatureImplemented(FEAT_MPAM_PE_BW_CTRL) &amp;&amp; MPAMIDR_EL1.HAS_HCR == '1') then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EffectiveHCR_EL2_NVx() IN {'1x1'} then
        NVMem[0x910] = X[t, 64];
    elsif EffectiveHCR_EL2_NVx() IN {'xx1'} then
        if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
            if EL3SDDUndef() then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        elsif HaveEL(EL3) &amp;&amp; MPAMBW3_EL3.nTRAPLOWER == '0' then
            if EL3SDDUndef() then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        else
            AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; MPAMBW3_EL3.nTRAPLOWER == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MPAMBW3_EL3.nTRAPLOWER == '0' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        MPAMBWCAP_EL2 = X[t, 64];
elsif PSTATE.EL == EL3 then
    MPAMBWCAP_EL2 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:53; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>