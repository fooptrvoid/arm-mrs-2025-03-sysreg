<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>BRBTGT&lt;n&gt;_EL1</reg_short_name>
        
        <reg_long_name>Branch Record Buffer Target Address Register &lt;n&gt;</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_BRBE is implemented</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>31</reg_array_end>
         </reg_array>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>The target address of Branch record n + (<register_link state="AArch64" id="AArch64-brbfcr_el1.xml">BRBFCR_EL1</register_link>.BANK &#215; 32).</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>BRBE</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>BRBTGT&lt;n&gt;_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>ADDRESS</field_name>
    <field_msb>63</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>63:0</rel_range>
    <field_description order="before"><para>Target virtual address of the Branch record.</para>
<para>When an indirect write occurs with a value with ADDRESS bits [63:P] indicating an invalid address, an <arm-defined-word>UNKNOWN</arm-defined-word> value which indicates an invalid address is written to bits [63:P].</para>
<para>An invalid address is:</para>
<list type="unordered">
<listitem><content>For an address in a translation regime with 2 VA ranges, with bits [63:P] not all zeroes or all ones.</content>
</listitem><listitem><content>For an address in a translation regime with a single VA range, with bits [63:P] not all zeroes.</content>
</listitem></list>
<para>P is defined as:</para>
<list type="unordered">
<listitem><content>56, when <xref filename="A_armv8_architecture_extensions.fm" linkend="FEAT_LVA3">FEAT_LVA3</xref> is implemented.</content>
</listitem><listitem><content>52, when <xref filename="A_armv8_architecture_extensions.fm" linkend="FEAT_LVA">FEAT_LVA</xref> is implemented.</content>
</listitem><listitem><content>48, otherwise.</content>
</listitem></list>
<para>The value in bits [P-1:0] is the value written.</para>
<para>When an indirect write occurs with a value with ADDRESS bits [63:P] indicating a valid address, the written value is written to bits [63:0], and a read of the register returns the written value.</para></field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <field_access>
      <field_access_state>
        <field_access_level operand="OR">
          <field_access_sublevel>BRBINF&lt;n&gt;_EL1.VALID == 0b00</field_access_sublevel>
          <field_access_sublevel>BRBINF&lt;n&gt;_EL1.VALID == 0b10</field_access_sublevel>
        </field_access_level>
        <field_access_type>
          <arm-defined-word>RES0</arm-defined-word>
        </field_access_type>
      </field_access_state>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_0" msb="63" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="31"/>
        </reg_variables>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>BRBTGT&lt;n&gt;_EL1 is <arm-defined-word>RES0</arm-defined-word> if n + (<register_link state="AArch64" id="AArch64-brbfcr_el1.xml">BRBFCR_EL1</register_link>.BANK &#215; 32) &gt;= <register_link state="AArch64" id="AArch64-brbidr0_el1.xml">BRBIDR0_EL1</register_link>.NUMREC.</para>
      </access_permission_text>





    
        
        <access_mechanism accessor="MRS BRBTGT&lt;m&gt;_EL1" type="SystemAccessor">
            <encoding>
                
                <acc_array var="m">
                    <acc_array_range>0-31</acc_array_range>
                </acc_array>
            <access_instruction>MRS &lt;Xt&gt;, BRBTGT&lt;m&gt;_EL1</access_instruction>
                
                <enc n="op0" v="0b10"/>
                
                <enc n="op1" v="0b001"/>
                
                <enc n="CRn" v="0b1000"/>
                
                <enc n="CRm" v="m[3:0]"/>
                
                <enc n="op2" v="m[4]:0b10"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
integer m = UInt(op2&lt;2&gt;:CRm&lt;3:0&gt;);

if !IsFeatureImplemented(FEAT_BRBE) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; MDCR_EL3.SBRBE != '11' &amp;&amp; SCR_EL3.NS == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; MDCR_EL3.SBRBE IN {'x0'} &amp;&amp; SCR_EL3.NS == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGRTR_EL2.nBRBDATA == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.SBRBE != '11' &amp;&amp; SCR_EL3.NS == '0' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.SBRBE IN {'x0'} &amp;&amp; SCR_EL3.NS == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif m + (UInt(BRBFCR_EL1.BANK) * 32) &gt;= NUM_BRBE_RECORDS then
        X[t, 64] = Zeros(64);
    else
        X[t, 64] = BRBTGT_EL1[m];
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; MDCR_EL3.SBRBE != '11' &amp;&amp; SCR_EL3.NS == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; MDCR_EL3.SBRBE IN {'x0'} &amp;&amp; SCR_EL3.NS == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.SBRBE != '11' &amp;&amp; SCR_EL3.NS == '0' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.SBRBE IN {'x0'} &amp;&amp; SCR_EL3.NS == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif m + (UInt(BRBFCR_EL1.BANK) * 32) &gt;= NUM_BRBE_RECORDS then
        X[t, 64] = Zeros(64);
    else
        X[t, 64] = BRBTGT_EL1[m];
elsif PSTATE.EL == EL3 then
    if m + (UInt(BRBFCR_EL1.BANK) * 32) &gt;= NUM_BRBE_RECORDS then
        X[t, 64] = Zeros(64);
    else
        X[t, 64] = BRBTGT_EL1[m];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:53; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>