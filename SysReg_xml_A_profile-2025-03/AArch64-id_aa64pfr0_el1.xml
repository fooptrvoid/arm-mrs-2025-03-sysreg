<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_stub_entry="False">
      <reg_short_name>ID_AA64PFR0_EL1</reg_short_name>
        
        <reg_long_name>AArch64 Processor Feature Register 0</reg_long_name>



      
            <reg_condition otherwise="UNDEFINED">when FEAT_AA64 is implemented</reg_condition>
      




          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Provides additional information about implemented PE features in AArch64 state.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers, see <xref linkend="#BABFAFHI">'Principles of the ID scheme for fields in ID registers'</xref>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Identification Registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>The external register <register_link state="ext" id="ext-edpfr.xml">EDPFR</register_link> gives information from this register.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ID_AA64PFR0_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_60" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CSV3</field_name>
    <field_msb>63</field_msb>
    <field_lsb>60</field_lsb>
    <rel_range>63:60</rel_range>
    <field_description order="before">
      <para>Speculative use of faulting data.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_CSV3">FEAT_CSV3</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>If <xref linkend="#FEAT_E0PD">FEAT_E0PD</xref> is implemented, <xref linkend="#FEAT_CSV3">FEAT_CSV3</xref> must be implemented.</para>
<para>From Armv8.5, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>This PE does not disclose whether data loaded or read from a register under speculation where the data load or register read would not be permitted architecturally, can be used by instructions newer than the load or register read in a manner that allows the value of the inaccessible data to be recovered by code architecturally executed.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Data loaded or read from a register under speculation where the data load or register read would not be permitted architecturally, cannot be used by instructions newer than the load or register read in a manner that allows the value of the inaccessible data to be recovered by code architecturally executed.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-59_56" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CSV2</field_name>
    <field_msb>59</field_msb>
    <field_lsb>56</field_lsb>
    <rel_range>59:56</rel_range>
    <field_description order="before">
      <para>Speculative use of out of context prediction resources.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_CSV2">FEAT_CSV2</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_CSV2_2">FEAT_CSV2_2</xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para><xref linkend="#FEAT_CSV2_3">FEAT_CSV2_3</xref> implements the functionality identified by the feature <binarynumber>0b0011</binarynumber>.</para>
<para>From Armv8.5, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The implementation does not disclose whether <xref linkend="#FEAT_CSV2">FEAT_CSV2</xref> is implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description><para><xref linkend="#FEAT_CSV2">FEAT_CSV2</xref> is implemented, but <xref linkend="#FEAT_CSV2_2">FEAT_CSV2_2</xref> and <xref linkend="#FEAT_CSV2_3">FEAT_CSV2_3</xref> are not implemented.</para>
<para><register_link state="AArch64" id="AArch64-id_aa64pfr1_el1.xml">ID_AA64PFR1_EL1</register_link>.CSV2_frac determines whether either or both of <xref linkend="#FEAT_CSV2_1p1">FEAT_CSV2_1p1</xref> or <xref linkend="#FEAT_CSV2_1p2">FEAT_CSV2_1p2</xref> are implemented.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para><xref linkend="#FEAT_CSV2_2">FEAT_CSV2_2</xref> is implemented, but <xref linkend="#FEAT_CSV2_3">FEAT_CSV2_3</xref> is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para><xref linkend="#FEAT_CSV2_3">FEAT_CSV2_3</xref> is implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-55_52" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>RME</field_name>
    <field_msb>55</field_msb>
    <field_lsb>52</field_lsb>
    <rel_range>55:52</rel_range>
    <field_description order="before">
      <para>Realm Management Extension (RME).</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_RME">FEAT_RME</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_RME_GPC2">FEAT_RME_GPC2</xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para><xref linkend="#FEAT_RME_GPC3">FEAT_RME_GPC3</xref> implements the functionality identified by the value <binarynumber>0b0011</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Realm Management Extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>RMEv1 is implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0001</binarynumber>, and adds support for the GPC2 Extension.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0010</binarynumber>, and adds support for the GPC3 Extension.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-51_48" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>DIT</field_name>
    <field_msb>51</field_msb>
    <field_lsb>48</field_lsb>
    <rel_range>51:48</rel_range>
    <field_description order="before">
      <para>Data Independent Timing.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_DIT">FEAT_DIT</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.4, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>AArch64 does not guarantee constant execution time of any instructions.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>AArch64 provides the <xref linkend="#PSTATE">PSTATE</xref>.DIT mechanism to guarantee constant execution time of certain instructions.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-47_44" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>AMU</field_name>
    <field_msb>47</field_msb>
    <field_lsb>44</field_lsb>
    <rel_range>47:44</rel_range>
    <field_description order="before">
      <para>Indicates support for Activity Monitors Extension.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_AMUv1">FEAT_AMUv1</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_AMUv1p1">FEAT_AMUv1p1</xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>In Armv8.0, the only permitted value is <binarynumber>0b0000</binarynumber>.</para>
<para>In Armv8.4, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.6, the permitted values are <binarynumber>0b0000</binarynumber>, <binarynumber>0b0001</binarynumber>, and <binarynumber>0b0010</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Activity Monitors Extension is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><xref linkend="#FEAT_AMUv1">FEAT_AMUv1</xref> is implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para><xref linkend="#FEAT_AMUv1p1">FEAT_AMUv1p1</xref> is implemented. As <binarynumber>0b0001</binarynumber> and adds support for virtualization of the activity monitor event counters.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-43_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>MPAM</field_name>
    <field_msb>43</field_msb>
    <field_lsb>40</field_lsb>
    <rel_range>43:40</rel_range>
    <field_description order="before">
      <para>Indicates the major version number of support for the MPAM Extension.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>When combined with the minor version number from <register_link state="AArch64" id="AArch64-id_aa64pfr1_el1.xml">ID_AA64PFR1_EL1</register_link>.MPAM_frac, the "major.minor" version is:</para>
<table><tgroup cols="3"><thead><row><entry>MPAM Extension version</entry><entry>MPAM</entry><entry>MPAM_frac</entry></row></thead><tbody><row><entry>Not implemented.</entry><entry><binarynumber>0b0000</binarynumber></entry><entry><binarynumber>0b0000</binarynumber></entry></row><row><entry>v0.1 is implemented.</entry><entry><binarynumber>0b0000</binarynumber></entry><entry><binarynumber>0b0001</binarynumber></entry></row><row><entry>v1.0 is implemented.</entry><entry><binarynumber>0b0001</binarynumber></entry><entry><binarynumber>0b0000</binarynumber></entry></row><row><entry>v1.1 is implemented.</entry><entry><binarynumber>0b0001</binarynumber></entry><entry><binarynumber>0b0001</binarynumber></entry></row></tbody></tgroup></table>
<para>For more information, see <xref filename="A_armv8_architecture_extensions.fm" linkend="MPAM">'The Memory Partitioning and Monitoring (MPAM) Extension'</xref>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The major version number of the MPAM extension is 0.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The major version number of the MPAM extension is 1.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-39_36" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SEL2</field_name>
    <field_msb>39</field_msb>
    <field_lsb>36</field_lsb>
    <rel_range>39:36</rel_range>
    <field_description order="before">
      <para>Secure EL2.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_SEL2">FEAT_SEL2</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.4, if Secure state and EL2 are implemented, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>From Armv8.4, if Secure state is not implemented, or if EL2 is not implemented, the only permitted value is <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Secure EL2 is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Secure EL2 is implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-35_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SVE</field_name>
    <field_msb>35</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>35:32</rel_range>
    <field_description order="before">
      <para>Scalable Vector Extension.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_SVE">FEAT_SVE</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>If implemented, refer to <register_link state="AArch64" id="AArch64-id_aa64zfr0_el1.xml">ID_AA64ZFR0_EL1</register_link> for information about which SVE instructions are available.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>SVE architectural state and programmers' model are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>SVE architectural state and programmers' model are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-31_28" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>RAS</field_name>
    <field_msb>31</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>31:28</rel_range>
    <field_description order="before">
      <para>RAS Extension version.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref linkend="#FEAT_RAS">FEAT_RAS</xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref linkend="#FEAT_RASv1p1">FEAT_RASv1p1</xref> and <xref linkend="#FEAT_DoubleFault">FEAT_DoubleFault</xref> implement the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para><xref linkend="#FEAT_RASv2">FEAT_RASv2</xref> implements the functionality identified by the value <binarynumber>0b0011</binarynumber>.</para>
<para>In Armv8.0 and Armv8.1, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the value <binarynumber>0b0000</binarynumber> is not permitted.</para>
<para>From Armv8.4, if <xref linkend="#FEAT_DoubleFault">FEAT_DoubleFault</xref> is implemented or <register_link state="AArch64" id="AArch64-erridr_el1.xml">ERRIDR_EL1</register_link>.NUM is nonzero, the value <binarynumber>0b0001</binarynumber> is not permitted.</para>
<note><para>When the value of this field is <binarynumber>0b0001</binarynumber>, <register_link state="AArch64" id="AArch64-id_aa64pfr1_el1.xml">ID_AA64PFR1_EL1</register_link>.RAS_frac indicates whether <xref linkend="#FEAT_RASv1p1">FEAT_RASv1p1</xref> is implemented.</para></note><para>From Armv8.9, if <xref linkend="#FEAT_DoubleFault">FEAT_DoubleFault</xref> is implemented or <register_link state="AArch64" id="AArch64-erridr_el1.xml">ERRIDR_EL1</register_link>.NUM is nonzero, the value <binarynumber>0b0010</binarynumber> is not permitted.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>No RAS Extension.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Support for the Reliability, Availability, and Serviceability Extension is implemented. The ESB instruction and the Error synchronization event are supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description><para>As <binarynumber>0b0001</binarynumber>, and adds support for:</para>
<list type="unordered">
<listitem><content>If EL3 is implemented, <xref linkend="#FEAT_DoubleFault">FEAT_DoubleFault</xref>.</content>
</listitem><listitem><content>Additional ERXMISC&lt;m&gt;_EL1 System registers.</content>
</listitem><listitem><content>Additional System registers <register_link state="AArch64" id="AArch64-erxpfgcdn_el1.xml">ERXPFGCDN_EL1</register_link>, <register_link state="AArch64" id="AArch64-erxpfgctl_el1.xml">ERXPFGCTL_EL1</register_link>, and <register_link state="AArch64" id="AArch64-erxpfgf_el1.xml">ERXPFGF_EL1</register_link>, and the <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.FIEN and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.FIEN trap controls, to support the optional RAS Common Fault Injection Model Extension.</content>
</listitem></list>
<para>Error records accessed through System registers conform to RAS System Architecture v1.1, which includes simplifications to <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link> and support for the optional RAS Timestamp and RAS Common Fault Injection Model Extensions.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description><para>As <binarynumber>0b0010</binarynumber> and adds support for:</para>
<list type="unordered">
<listitem><content><register_link state="AArch64" id="AArch64-erxgsr_el1.xml">ERXGSR_EL1</register_link>, to support System RAS agents.</content>
</listitem><listitem><content>Additional fine-grained EL2 traps for additional error record System registers.</content>
</listitem><listitem><content>The <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.TWERR write control for error record System registers.</content>
</listitem></list>
<para>Error records accessed through System registers conform to RAS System Architecture v2.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-27_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>GIC</field_name>
    <field_msb>27</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>27:24</rel_range>
    <field_description order="before">
      <para>System register GIC CPU interface.</para>
    </field_description>
    <field_description order="after">
      <para>All other values are reserved.</para>
    </field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>GIC CPU interface system registers not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>System register interface to versions 3.0 and 4.0 of the GIC CPU interface is supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>System register interface to version 4.1 of the GIC CPU interface is supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-23_20" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>AdvSIMD</field_name>
    <field_msb>23</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>23:20</rel_range>
    <field_description order="before">
      <para>Advanced SIMD.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>This field must have the same value as the FP field.</para>
<para>The permitted values are:</para>
<list type="unordered">
<listitem><content><binarynumber>0b0000</binarynumber> in an implementation with Advanced SIMD support that does not include the <xref linkend="#FEAT_FP16">FEAT_FP16</xref> extension.</content>
</listitem><listitem><content><binarynumber>0b0001</binarynumber> in an implementation with Advanced SIMD support that includes the <xref linkend="#FEAT_FP16">FEAT_FP16</xref> extension.</content>
</listitem><listitem><content><binarynumber>0b1111</binarynumber> in an implementation without Advanced SIMD support.</content>
</listitem></list></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description><para>Advanced SIMD is implemented, including support for the following SISD and SIMD operations:</para>
<list type="unordered">
<listitem><content>
<para>Integer byte, halfword, word and doubleword element operations.</para>
</content>
</listitem><listitem><content>
<para>Single-precision and double-precision floating-point arithmetic.</para>
</content>
</listitem><listitem><content>
<para>Conversions between single-precision and half-precision data types, and double-precision and half-precision data types.</para>
</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>As for <binarynumber>0b0000</binarynumber>, and also includes support for half-precision floating-point arithmetic.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
          <para>Advanced SIMD is not implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-19_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>FP</field_name>
    <field_msb>19</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>19:16</rel_range>
    <field_description order="before">
      <para>Floating-point.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>This field must have the same value as the AdvSIMD field.</para>
<para>The permitted values are:</para>
<list type="unordered">
<listitem><content><binarynumber>0b0000</binarynumber> in an implementation with floating-point support that does not include the <xref linkend="#FEAT_FP16">FEAT_FP16</xref> extension.</content>
</listitem><listitem><content><binarynumber>0b0001</binarynumber> in an implementation with floating-point support that includes the <xref linkend="#FEAT_FP16">FEAT_FP16</xref> extension.</content>
</listitem><listitem><content><binarynumber>0b1111</binarynumber> in an implementation without floating-point support.</content>
</listitem></list></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description><para>Floating-point is implemented, and includes support for:</para>
<list type="unordered">
<listitem><content>
<para>Single-precision and double-precision floating-point types.</para>
</content>
</listitem><listitem><content>
<para>Conversions between single-precision and half-precision data types, and double-precision and half-precision data types.</para>
</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>As for <binarynumber>0b0000</binarynumber>, and also includes support for half-precision floating-point arithmetic.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
          <para>Floating-point is not implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-15_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>EL3</field_name>
    <field_msb>15</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>15:12</rel_range>
    <field_description order="before">
      <para>EL3 Exception level handling.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>The value <binarynumber>0b0010</binarynumber> is not permitted in Armv9-A implementations.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>EL3 is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>EL3 can be executed in AArch64 state only.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>EL3 can be executed in either AArch64 or AArch32 state.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-11_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>EL2</field_name>
    <field_msb>11</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>11:8</rel_range>
    <field_description order="before">
      <para>EL2 Exception level handling.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>The value <binarynumber>0b0010</binarynumber> is not permitted in Armv9-A implementations.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>EL2 is not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>EL2 can be executed in AArch64 state only.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>EL2 can be executed in either AArch64 or AArch32 state.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-7_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>EL1</field_name>
    <field_msb>7</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>7:4</rel_range>
    <field_description order="before">
      <para>EL1 Exception level handling.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>The value <binarynumber>0b0010</binarynumber> is not permitted in Armv9-A implementations.</para></field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>EL1 can be executed in AArch64 state only.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>EL1 can be executed in either AArch64 or AArch32 state.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <field id="fieldset_0-3_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="True" is_partial_field="False" is_conditional_field_name="False">
    <field_name>EL0</field_name>
    <field_msb>3</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>EL0 Exception level handling.</para>
    </field_description>
    <field_description order="after">
      <para>All other values are reserved.</para>
    </field_description>
    <field_values impdef="True">
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>EL0 can be executed in AArch64 state only.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>EL0 can be executed in either AArch64 or AArch32 state.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_access>
      <field_access_state>
        <field_access_type>RO</field_access_type>
      </field_access_state>
    </field_access>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_60" msb="63" lsb="60"/>
  <fieldat id="fieldset_0-59_56" msb="59" lsb="56"/>
  <fieldat id="fieldset_0-55_52" msb="55" lsb="52"/>
  <fieldat id="fieldset_0-51_48" msb="51" lsb="48"/>
  <fieldat id="fieldset_0-47_44" msb="47" lsb="44"/>
  <fieldat id="fieldset_0-43_40" msb="43" lsb="40"/>
  <fieldat id="fieldset_0-39_36" msb="39" lsb="36"/>
  <fieldat id="fieldset_0-35_32" msb="35" lsb="32"/>
  <fieldat id="fieldset_0-31_28" msb="31" lsb="28"/>
  <fieldat id="fieldset_0-27_24" msb="27" lsb="24"/>
  <fieldat id="fieldset_0-23_20" msb="23" lsb="20"/>
  <fieldat id="fieldset_0-19_16" msb="19" lsb="16"/>
  <fieldat id="fieldset_0-15_12" msb="15" lsb="12"/>
  <fieldat id="fieldset_0-11_8" msb="11" lsb="8"/>
  <fieldat id="fieldset_0-7_4" msb="7" lsb="4"/>
  <fieldat id="fieldset_0-3_0" msb="3" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






    
        
        <access_mechanism accessor="MRS ID_AA64PFR0_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, ID_AA64PFR0_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0100"/>
                
                <enc n="op2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !IsFeatureImplemented(FEAT_AA64) then
    UnimplementedIDRegister();
elsif PSTATE.EL == EL0 then
    if IsFeatureImplemented(FEAT_IDST) then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ID_AA64PFR0_EL1;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; EL3SDDUndefPriority() &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; IsFeatureImplemented(FEAT_IDTE3) &amp;&amp; SCR_EL3.TID3 == '1' then
        if EL3SDDUndef() then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ID_AA64PFR0_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = ID_AA64PFR0_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>21/03/2025 17:52; 154105dd5041532b480d9ef0c018b8420cbe5c19</timestamp>
</register_page>